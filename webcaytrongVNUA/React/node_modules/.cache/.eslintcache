[{"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\index.js":"1","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\redux.js":"2","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\serviceWorker.js":"3","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\hoc\\IntlProviderWrapper.js":"4","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\App.js":"5","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\hoc\\authentication.js":"6","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\auth\\Login.js":"7","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\Home.js":"8","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Header\\Header.js":"9","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\System.js":"10","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\ConfirmModal.js":"11","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\CustomToast.js":"12","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\reducers\\rootReducer.js":"13","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\actionTypes.js":"14","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\index.js":"15","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\Navigator.js":"16","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Header\\menuApp.js":"17","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\CustomScrollbars.js":"18","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\reducers\\appReducer.js":"19","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\reducers\\userReducer.js":"20","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\UserManage.js":"21","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\index.js":"22","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\KeyCodeUtils.js":"23","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\LanguageUtils.js":"24","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\constant.js":"25","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\CommonUtils.js":"26","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\ToastUtil.js":"27","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\userActions.js":"28","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\appActions.js":"29","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\services\\index.js":"30","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\services\\userService.js":"31","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\axios.js":"32","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\config.js":"33","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\ModalUser.js":"34","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\emitter.js":"35","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\ModalEditUser.js":"36","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\HomePage.js":"37","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\HomeHeader.js":"38","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\Specialty.js":"39","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\MedicalFacility.js":"40","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\OutStandingDoctor.js":"41","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\HandBook.js":"42","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\About.js":"43","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\HomeFooter.js":"44","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\UserRedux.js":"45","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\adminActions.js":"46","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\reducers\\adminReducer.js":"47","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\TableManageUser.js":"48","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\ManageDoctor.js":"49","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\DetailDoctor.js":"50","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\Doctor.js":"51","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\ManageSchedule.js":"52","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\Input\\DatePicker.js":"53","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\DoctorSchedule.js":"54","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\DoctorExtraInfor.js":"55","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\Modal\\BookingModal.js":"56","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\ProfileDoctor.js":"57","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\Input\\index.js":"58","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\Input\\InputSuggest.js":"59","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\VerifyEmail.js":"60","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\auth\\Register.js":"61","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Specialty\\ManageSpecialty.js":"62","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Specialty\\DetailSpecialty.js":"63","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Clinic\\ManageClinic.js":"64","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Clinic\\DetailClinic.js":"65","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\ManagePatient.js":"66","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\RemedyModal.js":"67","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\Patient.js":"68","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Patient\\Manage_Patient.js":"69","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\RemedyPatientModal.js":"70","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Admin\\ManagePatients.js":"71","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\RemedyAdminModal.js":"72","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\Admin.js":"73","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\TableManageClinic.js":"74","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\TableManageSpecialty.js":"75","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Handbook\\ManageHandbook.js":"76","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\TableManageHandbook.js":"77","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Handbook\\DetailHandbook.js":"78"},{"size":927,"mtime":1664208778832,"results":"79","hashOfConfig":"80"},{"size":1514,"mtime":1664208781732,"results":"81","hashOfConfig":"80"},{"size":5086,"mtime":1662132386672,"results":"82","hashOfConfig":"80"},{"size":1095,"mtime":1664208688993,"results":"83","hashOfConfig":"80"},{"size":4733,"mtime":1667558915727,"results":"84","hashOfConfig":"80"},{"size":789,"mtime":1664208685257,"results":"85","hashOfConfig":"80"},{"size":6011,"mtime":1666460667439,"results":"86","hashOfConfig":"80"},{"size":638,"mtime":1664208695692,"results":"87","hashOfConfig":"80"},{"size":3287,"mtime":1667216104246,"results":"88","hashOfConfig":"80"},{"size":2570,"mtime":1667557597853,"results":"89","hashOfConfig":"80"},{"size":3862,"mtime":1662132386648,"results":"90","hashOfConfig":"80"},{"size":2282,"mtime":1662132386652,"results":"91","hashOfConfig":"80"},{"size":968,"mtime":1664208734242,"results":"92","hashOfConfig":"80"},{"size":3247,"mtime":1667559870942,"results":"93","hashOfConfig":"80"},{"size":251,"mtime":1662693139881,"results":"94","hashOfConfig":"80"},{"size":9328,"mtime":1662360195889,"results":"95","hashOfConfig":"80"},{"size":2660,"mtime":1667222560088,"results":"96","hashOfConfig":"80"},{"size":3173,"mtime":1662132386651,"results":"97","hashOfConfig":"80"},{"size":1116,"mtime":1664208731010,"results":"98","hashOfConfig":"80"},{"size":830,"mtime":1664208737758,"results":"99","hashOfConfig":"80"},{"size":7150,"mtime":1667304060529,"results":"100","hashOfConfig":"80"},{"size":91,"mtime":1663152319961,"results":"101","hashOfConfig":"80"},{"size":683,"mtime":1664208765132,"results":"102","hashOfConfig":"80"},{"size":963,"mtime":1664208761374,"results":"103","hashOfConfig":"80"},{"size":850,"mtime":1667558870534,"results":"104","hashOfConfig":"80"},{"size":354,"mtime":1664208749772,"results":"105","hashOfConfig":"80"},{"size":3001,"mtime":1664208768110,"results":"106","hashOfConfig":"80"},{"size":414,"mtime":1664208725057,"results":"107","hashOfConfig":"80"},{"size":572,"mtime":1664208720368,"results":"108","hashOfConfig":"80"},{"size":114,"mtime":1662626361575,"results":"109","hashOfConfig":"80"},{"size":6139,"mtime":1667562421101,"results":"110","hashOfConfig":"80"},{"size":401,"mtime":1664208772753,"results":"111","hashOfConfig":"80"},{"size":445,"mtime":1662132386664,"results":"112","hashOfConfig":"113"},{"size":4752,"mtime":1664208656137,"results":"114","hashOfConfig":"80"},{"size":136,"mtime":1664208755382,"results":"115","hashOfConfig":"80"},{"size":5406,"mtime":1664208651205,"results":"116","hashOfConfig":"80"},{"size":1718,"mtime":1664208627367,"results":"117","hashOfConfig":"80"},{"size":7648,"mtime":1666796640475,"results":"118","hashOfConfig":"80"},{"size":3225,"mtime":1667479666749,"results":"119","hashOfConfig":"80"},{"size":3674,"mtime":1667482417726,"results":"120","hashOfConfig":"80"},{"size":4447,"mtime":1667482452538,"results":"121","hashOfConfig":"80"},{"size":3133,"mtime":1667566414621,"results":"122","hashOfConfig":"80"},{"size":1562,"mtime":1667477545692,"results":"123","hashOfConfig":"80"},{"size":853,"mtime":1664208617492,"results":"124","hashOfConfig":"80"},{"size":15350,"mtime":1667653908320,"results":"125","hashOfConfig":"80"},{"size":21425,"mtime":1667564789013,"results":"126","hashOfConfig":"80"},{"size":5291,"mtime":1667561667912,"results":"127","hashOfConfig":"80"},{"size":4798,"mtime":1667394369004,"results":"128","hashOfConfig":"80"},{"size":20732,"mtime":1666862538005,"results":"129","hashOfConfig":"80"},{"size":4531,"mtime":1667665527460,"results":"130","hashOfConfig":"80"},{"size":2056,"mtime":1666889334625,"results":"131","hashOfConfig":"80"},{"size":9222,"mtime":1665588415296,"results":"132","hashOfConfig":"80"},{"size":5954,"mtime":1662132386655,"results":"133","hashOfConfig":"80"},{"size":8009,"mtime":1666777495403,"results":"134","hashOfConfig":"80"},{"size":7107,"mtime":1666691963655,"results":"135","hashOfConfig":"80"},{"size":15113,"mtime":1667650688567,"results":"136","hashOfConfig":"80"},{"size":5709,"mtime":1666777341034,"results":"137","hashOfConfig":"80"},{"size":112,"mtime":1662132386661,"results":"138","hashOfConfig":"80"},{"size":4358,"mtime":1662132386656,"results":"139","hashOfConfig":"80"},{"size":2573,"mtime":1666267321599,"results":"140","hashOfConfig":"80"},{"size":4748,"mtime":1666518678200,"results":"141","hashOfConfig":"80"},{"size":10856,"mtime":1667564548776,"results":"142","hashOfConfig":"80"},{"size":6711,"mtime":1666776925955,"results":"143","hashOfConfig":"80"},{"size":11615,"mtime":1667564492355,"results":"144","hashOfConfig":"80"},{"size":4837,"mtime":1666808338581,"results":"145","hashOfConfig":"80"},{"size":9064,"mtime":1667666629817,"results":"146","hashOfConfig":"80"},{"size":3627,"mtime":1667664933394,"results":"147","hashOfConfig":"80"},{"size":1916,"mtime":1667222150184,"results":"148","hashOfConfig":"80"},{"size":7694,"mtime":1667304452928,"results":"149","hashOfConfig":"80"},{"size":3240,"mtime":1667647294211,"results":"150","hashOfConfig":"80"},{"size":7439,"mtime":1667302152419,"results":"151","hashOfConfig":"80"},{"size":3309,"mtime":1667647310373,"results":"152","hashOfConfig":"80"},{"size":1882,"mtime":1667224288153,"results":"153","hashOfConfig":"80"},{"size":4268,"mtime":1667391352749,"results":"154","hashOfConfig":"80"},{"size":4273,"mtime":1667562729729,"results":"155","hashOfConfig":"80"},{"size":10793,"mtime":1667564504050,"results":"156","hashOfConfig":"80"},{"size":4230,"mtime":1667564032145,"results":"157","hashOfConfig":"80"},{"size":2392,"mtime":1667566804389,"results":"158","hashOfConfig":"80"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},"1vystd0",{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"161"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"161"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"161"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"224"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"161"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"722k2h",{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"235"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"235"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"161"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"161"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"161"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"161"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"161"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"161"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"161"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"161"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"161"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"161"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"161"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"161"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"161"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"161"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"161"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"161"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"161"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"161"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"161"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"161"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"161"},"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\index.js",[],["352","353"],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\redux.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\serviceWorker.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\hoc\\IntlProviderWrapper.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\App.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\hoc\\authentication.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\auth\\Login.js",["354","355"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { push } from \"connected-react-router\";\r\nimport * as actions from \"../../store/actions\";\r\nimport './Login.scss';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport Register from './Register';\r\n// import {userService} from '../../services'\r\nimport { emitter } from '../../utils/emitter';\r\nimport { handleLoginApi, createNewUserService } from '../../services/userService';\r\nimport { reject } from 'lodash';\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n       isOpenModalUser: false,\r\n      isShowPassword: false,\r\n      errMessage: ''\r\n    }\r\n  }\r\n\r\n  handleOnChangeUsername = (event) => {\r\n    this.setState({ username: event.target.value })\r\n  }\r\n  handleOnChangePassword = (event) => {\r\n    this.setState({ password: event.target.value })\r\n  }\r\n  handleLogin = async () => {\r\n    this.setState({\r\n      errMessage: ''\r\n      // để clear mã lỗi trong trường hợp lần đăng nhập trước\r\n      // bị lỗi, lần nhập thông tin sau sẽ hiện ra mã lỗi khác hoặc đăng nhập thành công \r\n    })\r\n    try {\r\n      let data = await handleLoginApi(this.state.username, this.state.password);\r\n      if (data && data.errCode !== 0) {\r\n        this.setState({\r\n          errMessage: data.message\r\n        })\r\n      }\r\n      if (data && data.errCode === 0) {\r\n        this.props.userLoginSuccess(data.user)\r\n\r\n      }\r\n    } catch (error) {\r\n      if (error.response) {\r\n        if (error.response.data) {\r\n          this.setState({\r\n            errorMessage: error.response.data.message\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleShowHidePassword = (event) => {\r\n    this.setState({\r\n      isShowPassword: !this.state.isShowPassword\r\n    })\r\n  }\r\n  handleKeyDown = (event) => {\r\n    if (event.key === 'Enter' || event.keyCode === 13) {\r\n      this.handleLogin();\r\n    }\r\n  }\r\n  handleAddNewUser = () => {\r\n    this.setState({\r\n      isOpenModalUser: true,\r\n    })\r\n  }\r\n  toggleUserModal = () => {\r\n    this.setState({\r\n      isOpenModalUser: !this.state.isOpenModalUser,\r\n    })\r\n  }\r\n  createNewUser = async (data) => {\r\n    try {\r\n      let response = await createNewUserService(data);\r\n      if (response && response.errCode !== 0) {\r\n        alert(response.errMessage);\r\n      } else {\r\n        this.setState({\r\n          isOpenModalUser: false,\r\n        })\r\n        emitter.emit('EVENT_CLEAR_MODAL_DATA')\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }\r\n  render() {\r\n    //JSX\r\n\r\n    return (\r\n     \r\n        <div className=\"login-background\">\r\n        <Register\r\n          isOpen={this.state.isOpenModalUser}\r\n          toggleFromParent={this.toggleUserModal}\r\n          createNewUser={this.createNewUser} />\r\n          <div className=\"login-container\">\r\n            <div className=\"login-content row\">\r\n\r\n              <div className=\"col-12  text-login\">Login </div>\r\n              <div className=\"col-12 form-group login-input\">\r\n                <label>Username:</label>\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Enter your username\"\r\n                  value={this.state.username} onChange={(event) => this.handleOnChangeUsername(event)}></input>\r\n              </div>\r\n              <div className=\"col-12 form-group login-input\">\r\n                <label>Password:</label>\r\n                <div className=\"cus-password-input\">\r\n                  <input type={this.state.isShowPassword ? 'text' : 'password'}\r\n                    className=\"form-control\" placeholder=\"Enter your password\"\r\n                    value={this.state.password}\r\n                    onChange={(event) => { this.handleOnChangePassword(event) }}\r\n                    onKeyDown={(event) => this.handleKeyDown(event)} ></input>\r\n                  <span onClick={() => { this.handleShowHidePassword() }}>\r\n\r\n                    <i className={this.state.isShowPassword ? 'fa-solid fa-eye' : 'fa-regular fa-eye-slash'}></i>\r\n                  </span>\r\n\r\n                </div>\r\n\r\n\r\n              </div>\r\n              <div className=\"col-12\" style={{ color: 'red' }}>\r\n                {this.state.errMessage}\r\n              </div>\r\n              {/* Đây là cách cmt của React, và style inline của React được viết như trên kia  */}\r\n              <div className=\"col-12 login-input\">\r\n                <button className=\"btn-login\" onClick={() => { this.handleLogin() }}>Login</button>\r\n              </div>\r\n              <div className=\"col-12\">\r\n                <span className=\"sign-up\">Or</span>\r\n              </div>\r\n              <div className=\"col-12 login-input\">\r\n              <button className=\"btn-login\" onClick={() => {this.handleAddNewUser()}}>Register</button>\r\n              </div>\r\n              <div className=\"col-12\">\r\n                <span className=\"forgot-pass\">Forgot your password?</span>\r\n              </div>\r\n              <div className=\"col-12 text-center mt-3\">\r\n                <span >Or Login with:</span>\r\n              </div>\r\n              <div className=\"col-12 social-login\">\r\n                <i className=\"fa-brands fa-google google\"></i>\r\n                <i className=\"fa-brands fa-facebook-f facebook\"></i>\r\n                <i className=\"fa-brands fa-twitter twitter\"></i>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n    \r\n     \r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    language: state.app.language\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    navigate: (path) => dispatch(push(path)),\r\n    // adminLoginSuccess: (adminInfo) => dispatch(actions.adminLoginSuccess(adminInfo)),\r\n    // adminLoginFail: () => dispatch(actions.adminLoginFail()),\r\n    userLoginSuccess: (userInfo) => dispatch(actions.userLoginSuccess(userInfo))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\Home.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Header\\Header.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\System.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\ConfirmModal.js",[],["356","357"],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\CustomToast.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\reducers\\rootReducer.js",["358"],"import { combineReducers } from 'redux';\r\nimport { connectRouter } from 'connected-react-router';\r\n\r\nimport appReducer from \"./appReducer\";\r\n\r\nimport userReducer from \"./userReducer\";\r\n\r\nimport autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { persistReducer } from 'redux-persist';\r\nimport adminReducer from './adminReducer';\r\n\r\nconst persistCommonConfig = {\r\n    storage: storage,\r\n    stateReconciler: autoMergeLevel2,\r\n};\r\n\r\nconst userPersistConfig = {\r\n    ...persistCommonConfig,\r\n    key: 'user',\r\n    whitelist: ['isLoggedIn', 'userInfo']\r\n};\r\nconst appPersistConfig = {\r\n    ...persistCommonConfig,\r\n    key: 'app',\r\n    whitelist: ['language']\r\n}\r\nexport default (history) => combineReducers({\r\n    router: connectRouter(history),\r\n    user: persistReducer(userPersistConfig, userReducer),\r\n    app: persistReducer(appPersistConfig, appReducer),\r\n    admin: adminReducer\r\n})","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\actionTypes.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\index.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\Navigator.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Header\\menuApp.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\CustomScrollbars.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\reducers\\appReducer.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\reducers\\userReducer.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\UserManage.js",["359"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './UserManage.scss';\r\n// import ModalUser from './ModalUser';\r\n// import { emitter } from '../../utils/emitter';\r\n// import ModalEditUser from './ModalEditUser';\r\n// import Header from '../Header/Header';\r\n// import { getAllSpecialty, createNewUserService, deleteUserService, editUserService } from '../../services/userService';\r\n// nếu muố import 1 function thì ta dùng dấu ngoặc nhọn\r\nclass UserManage extends Component {\r\n    // stands for properties and is being used for passing data from one component to another.\r\n    // But the important part here is that data with props are being passed in a uni-directional flow. ( one way from parent to child)\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // arrUsers: [],\r\n            // isOpenModalUser: false,\r\n            // isOpenModalEditUser: false,\r\n            // userEdit: {},\r\n            // dataSpecialty: []\r\n        }\r\n    }\r\n    //để lưu giá trị của 1 biến components, ta dùng state\r\n    //Component là một block code độc lập để phân chia các UI (giao diện người dùng) thành các phân nhỏ riêng lẻ để dễ dàng quản lý và tái sử dụng.\r\n    async componentDidMount() {\r\n        // await this.getAllUsersFromReact();\r\n       \r\n    }\r\n    // getAllUsersFromReact = async () => {\r\n    //     let response = await getAllUsers('ALL');\r\n    //     if (response && response.errCode === 0) {\r\n    //         this.setState({\r\n    //             arrUsers: response.users\r\n    //         })\r\n    //     }\r\n    // }\r\n    // handleAddNewUser = () => {\r\n    //     this.setState({\r\n    //         isOpenModalUser: true,\r\n    //     })\r\n    // }\r\n    // toggleUserModal = () => {\r\n    //     this.setState({\r\n    //         isOpenModalUser: !this.state.isOpenModalUser,\r\n    //     })\r\n    // }\r\n    // toggleUserEditModal = () => {\r\n    //     this.setState({\r\n    //         isOpenModalEditUser: !this.state.isOpenModalEditUser,\r\n    //     })\r\n    // }\r\n    // createNewUser = async (data) => {\r\n    //     try {\r\n    //         let response = await createNewUserService(data);\r\n    //         if (response && response.errCode !== 0) {\r\n    //             alert(response.errMessage);\r\n    //         } else {\r\n    //             await this.getAllUsersFromReact(); //\r\n    //             this.setState({\r\n    //                 isOpenModalUser: false,\r\n    //             })\r\n    //             emitter.emit('EVENT_CLEAR_MODAL_DATA')\r\n    //         }\r\n    //     } catch (e) {\r\n    //         console.log(e);\r\n    //     }\r\n    // }\r\n    // handleDeleteUser = async (user) => {\r\n    //     try {\r\n    //         let res = await deleteUserService(user.id);\r\n    //         if (res && res.errCode === 0) {\r\n    //             await this.getAllUsersFromReact();\r\n    //         }\r\n    //         else {\r\n    //             alert(res.errMessage);\r\n    //         }\r\n    //     } catch (e) {\r\n\r\n    //     }\r\n    // }\r\n    // handleEditUser = (user) => {\r\n    //     this.setState({\r\n    //         isOpenModalEditUser: true,\r\n    //         userEdit: user\r\n    //     })\r\n    // }\r\n    // doEditUser = async (user) => {\r\n    //     try {\r\n    //         let res = await editUserService(user);\r\n    //         if (res && res.errCode === 0) {\r\n    //             this.setState({\r\n    //                 isOpenModalEditUser: false\r\n    //             })\r\n    //             await this.getAllUsersFromReact()\r\n\r\n    //         } else {\r\n    //             alert(res.errCode)\r\n    //         }\r\n    //     } catch (e) {\r\n\r\n    //     }\r\n\r\n\r\n    // }\r\n    //toggle nghĩa là click ra bên ngoài, tác dụng là đóng hoặc mở modal\r\n    render() {\r\n        // let { dataSpecialty } = this.state;\r\n        // console.log('check render', this.state)\r\n        //khi muốn render ra 1 thứ gì đó trong react, chúng ta phải có hàm return, và trong đó bắt buộc là 1 khối\r\n        // let arrUsers = this.state.arrUsers;\r\n\r\n        return (\r\n            <div className=\"user-container\" >\r\n              \r\n                {/* <ModalUser\r\n                    isOpen={this.state.isOpenModalUser}\r\n                    toggleFromParent={this.toggleUserModal}\r\n                    createNewUser={this.createNewUser} />\r\n                {this.state.isOpenModalEditUser &&\r\n                    <ModalEditUser\r\n                        isOpen={this.state.isOpenModalEditUser}\r\n                        toggleFromParent={this.toggleUserEditModal}\r\n                        currentUser={this.state.userEdit}\r\n                        editUser={this.doEditUser}\r\n                    />\r\n                } */}\r\n\r\n                <div className=\"user-container title text-center\">Welcome!</div>\r\n               \r\n                {/* <div className=\"mx-1\">\r\n                    <button className=\"btn btn-primary px-3\"\r\n                        onClick={() => this.handleAddNewUser()}><i className=\"fa-solid fa-plus\"></i>Add new user</button>\r\n                </div>\r\n                <div className=\"users-table mt-3 mx-1\">\r\n                    <table id=\"customers\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>Email</th>\r\n                                <th>First name</th>\r\n                                <th>Last name</th>\r\n                                <th>Address</th>\r\n                                <th>Actions</th>\r\n                            </tr>\r\n                            {arrUsers && arrUsers.map((item, index) => {\r\n                                // để duyệt 1 vòng lặp, ta có thể dùng function map(), bắt buộc phải return ra 1 thứ gì đó\r\n                                // thì function map() mới hoạt động được\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <td>{item.email}</td>\r\n                                        <td>{item.firstName}</td>\r\n                                        <td>{item.lastName}</td>\r\n                                        <td>{item.address}</td>\r\n                                        <td>\r\n                                            <button className=\"btn-edit\" onClick={() => this.handleEditUser(item)} ><i className=\"fa-solid fa-pencil\"></i></button>\r\n                                            <button className=\"btn-delete\" onClick={() => this.handleDeleteUser(item)}><i className=\"fa-solid fa-trash\"></i></button>\r\n                                        </td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n\r\n                    </table>\r\n                </div> */}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserManage);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\index.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\KeyCodeUtils.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\LanguageUtils.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\constant.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\CommonUtils.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\ToastUtil.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\userActions.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\appActions.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\services\\index.js",[],["360","361"],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\services\\userService.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\axios.js",["362","363"],"import axios from 'axios';\r\nimport _ from 'lodash';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n    // withCredentials: true\r\n});\r\n\r\n\r\ninstance.interceptors.response.use(\r\n    (response) => {\r\n        // Thrown error for request with OK status code\r\n        const { data } = response;\r\n        return response.data;\r\n\r\n    }\r\n);\r\n\r\nexport default instance;\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\config.js",["364"],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\ModalUser.js",["365"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './UserManage.scss';\r\nimport { emitter } from '../../utils/emitter';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nclass ModalUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: ' ',\r\n            address: ''\r\n        }\r\n        this.listenToEmitter();\r\n    }\r\n    listenToEmitter() {\r\n        emitter.on('EVENT_CLEAR_MODAL_DATA', () => {\r\n            this.setState({\r\n                email: '',\r\n                password: '',\r\n                firstName: '',\r\n                lastName: ' ',\r\n                address: ''\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n    toggle = () => {\r\n        this.props.toggleFromParent();\r\n    }\r\n    handleOnChangeInput = (event, id) => {\r\n        let copyState = { ...this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState\r\n        });\r\n    }\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrInput = ['email', 'password', 'firstName', 'lastName', 'address'];\r\n        for (let i = 0; i < arrInput.length; i++) {\r\n            if (!this.state[arrInput[i]]) {\r\n                isValid = false;\r\n                alert('Missing parameter: ' + arrInput[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n    handleAddNewUser = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === true) {\r\n            //gọi api để tạo modal\r\n            this.props.createNewUser(this.state, 'DONE!');\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal\r\n                isOpen={this.props.isOpen}\r\n                toggle={() => { this.toggle() }}\r\n                className={'modal-user-container'}\r\n                size=\"lg\">\r\n                <ModalHeader toggle={() => { this.toggle() }}>ADD NEW USER:</ModalHeader>\r\n                <ModalBody>\r\n\r\n                    <div className=\"modal-user-body\">\r\n                        <div className=\"input-container \">\r\n                            <label>Email</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"email\") }}\r\n                                value={this.state.email}></input>\r\n                        </div>\r\n                        <div className=\"input-container \">\r\n                            <label>Password</label>\r\n                            <input type=\"password\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"password\") }}\r\n                                value={this.state.password}\r\n                            ></input>\r\n                        </div>\r\n                        <div className=\"input-container \">\r\n                            <label>First Name</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"firstName\") }}\r\n                                value={this.state.firstName}></input>\r\n                        </div>\r\n                        <div className=\"input-container \">\r\n                            <label>Last Name</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"lastName\") }}\r\n                                value={this.state.lastName}></input>\r\n                        </div>\r\n                        <div className=\"input-container max-width-input\">\r\n                            <label>Address</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"address\") }}\r\n                                value={this.state.address}></input>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" className=\"px-3\" onClick={() => { this.handleAddNewUser() }}>Add new user</Button>\r\n                    <Button color=\"secondary\" className=\"px-3\" onClick={() => { this.toggle() }}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalUser);\r\n\r\n\r\n\r\n\r\n",["366","367"],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\utils\\emitter.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\ModalEditUser.js",["368","369"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './UserManage.scss';\r\nimport { emitter } from '../../utils/emitter';\r\nimport _ from 'lodash';\r\n\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nclass ModalEditUser extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            email: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: ' ',\r\n            address: ''\r\n        }\r\n\r\n    }\r\n    listenToEmitter() {\r\n        emitter.on('EVENT_CLEAR_MODAL_DATA', () => {\r\n            this.setState({\r\n                id: '',\r\n                email: '',\r\n                password: '',\r\n                firstName: '',\r\n                lastName: ' ',\r\n                address: ''\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        let user = this.props.currentUser;\r\n        if (user && !_.isEmpty(user)) {\r\n            {\r\n                this.setState({\r\n                    id: user.id,\r\n                    email: user.email,\r\n                    password: 'hardcode',\r\n                    firstName: user.firstName,\r\n                    lastName: user.lastName,\r\n                    address: user.address\r\n                })\r\n            }\r\n        }\r\n    }\r\n    toggle = () => {\r\n        this.props.toggleFromParent();\r\n    }\r\n    handleOnChangeInput = (event, id) => {\r\n        let copyState = { ...this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState\r\n        });\r\n    }\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrInput = ['email', 'password', 'firstName', 'lastName', 'address'];\r\n        for (let i = 0; i < arrInput.length; i++) {\r\n            if (!this.state[arrInput[i]]) {\r\n                isValid = false;\r\n                alert('Missing parameter: ' + arrInput[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n    handleSaveUser = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === true) {\r\n            //gọi api để tạo modal\r\n            this.props.editUser(this.state);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal\r\n                isOpen={this.props.isOpen}\r\n                toggle={() => { this.toggle() }}\r\n                className={'modal-user-container'}\r\n                size=\"lg\">\r\n                <ModalHeader toggle={() => { this.toggle() }}>EDIT USER:</ModalHeader>\r\n                <ModalBody>\r\n\r\n                    <div className=\"modal-user-body\">\r\n                        <div className=\"input-container \">\r\n                            <label>Email</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"email\") }}\r\n                                value={this.state.email}\r\n                                disabled>\r\n                            </input>\r\n                        </div>\r\n                        <div className=\"input-container \">\r\n                            <label>Password</label>\r\n                            <input type=\"password\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"password\") }}\r\n                                value={this.state.password}\r\n                                disabled\r\n                            ></input>\r\n                        </div>\r\n                        <div className=\"input-container \">\r\n                            <label>First Name</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"firstName\") }}\r\n                                value={this.state.firstName}></input>\r\n                        </div>\r\n                        <div className=\"input-container \">\r\n                            <label>Last Name</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"lastName\") }}\r\n                                value={this.state.lastName}></input>\r\n                        </div>\r\n                        <div className=\"input-container max-width-input\">\r\n                            <label>Address</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"address\") }}\r\n                                value={this.state.address}></input>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" className=\"px-3\" onClick={() => { this.handleSaveUser() }}>Save Changes</Button>\r\n                    <Button color=\"secondary\" className=\"px-3\" onClick={() => { this.toggle() }}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalEditUser);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\HomePage.js",["370"],"import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport HomeHeader from './HomeHeader';\r\nimport Specialty from './Section/Specialty';\r\nimport MedicalFacility from './Section/MedicalFacility';\r\nimport OutStandingDoctor from './Section/OutStandingDoctor';\r\nimport HandBook from './Section/HandBook';\r\nimport About from './Section/About';\r\nimport HomeFooter from './HomeFooter';\r\nimport './HomePage.scss';\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nclass HomePage extends Component {\r\n\r\n    render() {\r\n        let settings = {\r\n            dots: false,\r\n            infinite: false,\r\n            speed: 500,\r\n            slidesToShow: 4,\r\n            slidesToScroll: 1,\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <HomeHeader isShowBanner={true} />\r\n                {/* đặt giá trị mặc định cho isShowBanner của HomeHeader là true */}\r\n                <Specialty\r\n                    settings={settings}>\r\n                </Specialty>\r\n                <MedicalFacility settings={settings}></MedicalFacility>\r\n                <OutStandingDoctor\r\n                    settings={settings} />\r\n                <HandBook settings={settings}></HandBook>\r\n                <About />\r\n                <HomeFooter ></HomeFooter>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\HomeHeader.js",["371","372"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './HomeHeader.scss';\r\nimport { LANGUAGES } from '../../utils';\r\nimport * as actions from \"../../store/actions\";\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { withRouter } from 'react-router';\r\nclass HomeHeader extends Component {\r\n    changeLanguage = (language) => {\r\n        this.props.changeLanguageAppRedux(language);\r\n    }\r\n    returnToHome = () => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/home`)\r\n        }\r\n    }\r\n    goToLogin = () => {\r\n        if (this.props.history) {\r\n            this.props.history.push(`/login`)\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        let { userInfo } = this.props;\r\n       \r\n    }\r\n    render() {\r\n        let language = this.props.language;\r\n        console.log(\"check language: \", language);\r\n        const {  userInfo } = this.props;\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <div className=\"home-header-container\">\r\n                    <div className=\"home-header-content\">\r\n                        <div className=\"left-content\">\r\n                            <i className=\"fa-solid fa-bars-staggered\"></i>\r\n\r\n                            <img className=\"header-logo\" onClick={() => this.returnToHome()}></img>\r\n                        </div>\r\n                        <div className=\"center-content\">\r\n                            <div className=\"child-content\">\r\n                                <div><b><FormattedMessage id=\"homeheader.speciality\" /></b></div>\r\n                                <div className=\"sub-title\"> <FormattedMessage id=\"homeheader.searchdoctor\" /></div>\r\n                            </div>\r\n                            <div className=\"child-content\">\r\n                                <div><b> <FormattedMessage id=\"homeheader.health-facility\" /></b></div>\r\n                                <div className=\"sub-title\"> <FormattedMessage id=\"homeheader.select-room\" /></div>\r\n                            </div>\r\n                            <div className=\"child-content\">\r\n                                <div><b><FormattedMessage id=\"homeheader.doctor\" /></b></div>\r\n                                <div className=\"sub-title\"> <FormattedMessage id=\"homeheader.select-doctor\" /> </div>\r\n                            </div>\r\n                            <div className=\"child-content\">\r\n                                <div><b><FormattedMessage id=\"homeheader.fee\" /></b></div>\r\n                                <div className=\"sub-title\"><FormattedMessage id=\"homeheader.check-health\" /></div>\r\n                            </div>\r\n                            <div className=\" child-content\" onClick={() => this.goToLogin()}>\r\n                                <div><b><FormattedMessage id=\"homeheader.manage-account\" /></b></div>\r\n                                <div className=\"support\">\r\n                                    <FormattedMessage id=\"homeheader.welcome\"></FormattedMessage>\r\n                                    {userInfo && userInfo.firstName && userInfo.lastName ? ' ' + userInfo.firstName + ' ' + userInfo.lastName : ' '} !\r\n                                    {/* Khi có thông tin của userInfo với 2 biến đầy đủ như kia thì ta in ra, không thì trả về giá trị rỗng */}\r\n                                </div>\r\n\r\n\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"right-content\">\r\n                            <div className=\"language\">\r\n                                <div className={language === LANGUAGES.VI ? 'language-vi active' : 'language-vi'}>\r\n                                    <span onClick={() => this.changeLanguage(LANGUAGES.VI)}>VN</span>\r\n                                </div>\r\n                                <div className={language === LANGUAGES.EN ? 'language-en active' : 'language-en'}>\r\n                                    <span onClick={() => this.changeLanguage(LANGUAGES.EN)}>EN\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                       \r\n                       \r\n                    </div>\r\n\r\n                </div>\r\n                {this.props.isShowBanner === true &&\r\n                    <div className=\"home-header-banner\">\r\n                        <div className=\"content-up\">\r\n                            <div className=\"title1\"><FormattedMessage id=\"banner.title1\" /></div>\r\n                            <div className=\"title2\"><FormattedMessage id=\"banner.title2\" /></div>\r\n                            <div className=\"search\"><i className=\"fa-solid fa-magnifying-glass\"></i>\r\n                                <input type=\"text\" placeholder='Search...'></input></div>\r\n                        </div>\r\n                        <div className=\"content-down\">\r\n                            <div className=\"options\">\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\"><i className=\"fa-solid fa-tree\"></i></div>\r\n                                    <div className=\"text-child\"><FormattedMessage id=\"banner.child1\" /></div>\r\n                                </div>\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\"><i className=\"fa-solid fa-mobile-screen-button\"></i></div>\r\n                                    <div className=\"text-child\"><FormattedMessage id=\"banner.child2\" /></div>\r\n                                </div>\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\"><i className=\"fa-solid fa-book-medical\"></i></div>\r\n                                    <div className=\"text-child\"><FormattedMessage id=\"banner.child3\" /></div>\r\n                                </div>\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\"><i className=\"fa-solid fa-mosquito\"></i></div>\r\n                                    <div className=\"text-child\"><FormattedMessage id=\"banner.child4\" /></div>\r\n                                </div>\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\"><i className=\"fa-brands fa-pagelines\"></i></div>\r\n                                    <div className=\"text-child\"><FormattedMessage id=\"banner.child5\" /></div>\r\n                                </div>\r\n                                <div className=\"option-child\">\r\n                                    <div className=\"icon-child\"><i className=\"fa-solid fa-sun-plant-wilt\"></i></div>\r\n                                    <div className=\"text-child\"><FormattedMessage id=\"banner.child6\" /></div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                }\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        language: state.app.language,\r\n        userInfo: state.user.userInfo\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        processLogout: () => dispatch(actions.processLogout()),\r\n        changeLanguageAppRedux: (language) => dispatch(actions.changeLanguageApp(language)),\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(HomeHeader));","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\Specialty.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\MedicalFacility.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\OutStandingDoctor.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\HandBook.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\Section\\About.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\HomePage\\HomeFooter.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\UserRedux.js",["373"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { LANGUAGES, CRUD_ACTIONS, CommonUtils } from '../../utils';\r\nimport './UserRedux.scss';\r\nimport TableManageUser from './TableManageUser';\r\nimport * as actions from '../../store/actions';\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css'; // This only needs to be imported once in your app\r\nclass UserRedux extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      genderArr: [],\r\n      positionArr: [],\r\n      roleIdArr: [],\r\n      isOpen: false,\r\n      previewImgURL: '',\r\n\r\n      email: '',\r\n      password: '',\r\n      firstName: '',\r\n      lastName: '',\r\n      phoneNumber: '',\r\n      address: '',\r\n      gender: '',\r\n      position: '',\r\n      role: '',\r\n      avatar: '',\r\n      action: '',\r\n      userEditId: '',\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n\r\n    this.props.getGenderStart();\r\n    this.props.getPositionStart();\r\n    this.props.getRoleIdStart();\r\n  }\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevProps.genderRedux !== this.props.genderRedux\r\n\r\n    ) {\r\n      let arrGenders = this.props.genderRedux;\r\n      this.setState({\r\n        genderArr: arrGenders,\r\n        gender: arrGenders && arrGenders.length ? arrGenders[0].keyMap : ''\r\n\r\n      })\r\n    }\r\n    if (prevProps.positionRedux !== this.props.positionRedux) {\r\n      let arrPositions = this.props.positionRedux;\r\n      this.setState({\r\n        positionArr: arrPositions,\r\n        position: arrPositions && arrPositions.length > 0 ? arrPositions[0].keyMap : '',\r\n      })\r\n    }\r\n    if (prevProps.roleIdRedux !== this.props.roleIdRedux) {\r\n      let arrRoles = this.props.roleIdRedux;\r\n      this.setState({\r\n        roleIdArr: arrRoles,\r\n        role: arrRoles && arrRoles.length > 0 ? arrRoles[0].keyMap : ''\r\n      })\r\n    }\r\n    if (prevProps.listUsers !== this.props.listUsers) {\r\n      let arrGenders = this.props.genderRedux;\r\n      let arrRoles = this.props.roleIdRedux;\r\n      let arrPositions = this.props.positionRedux;\r\n      this.setState({\r\n        email: '',\r\n        password: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        phoneNumber: '',\r\n        address: '',\r\n        gender: arrGenders && arrGenders.length > 0 ? arrGenders[0].keyMap : '',\r\n        position: arrPositions && arrPositions.length > 0 ? arrPositions[0].keyMap : '',\r\n        role: arrRoles && arrRoles.length > 0 ? arrRoles[0].keyMap : '',\r\n        avatar: '',\r\n        action: CRUD_ACTIONS.CREATE,\r\n        previewImgURL: ''\r\n      })\r\n    }\r\n  }\r\n  handleOnChangeImage = async (event) => {\r\n    let data = event.target.files;\r\n    let file = data[0];\r\n    if (file) {\r\n      let base64 = await CommonUtils.getBase64(file);\r\n      let objectUrl = URL.createObjectURL(file);\r\n      this.setState({\r\n        previewImgURL: objectUrl,\r\n        avatar: base64,\r\n      })\r\n    }\r\n  }\r\n  openPreviewImage = () => {\r\n    if (!this.state.previewImgURL) return;\r\n    this.setState({\r\n      isOpen: true\r\n    })\r\n  }\r\n  handleSaveUser = () => {\r\n    let isValid = this.checkValidateInput();\r\n    if (isValid === false) return;\r\n    let { action } = this.state;\r\n    if (action === CRUD_ACTIONS.CREATE) {\r\n      this.props.createNewUser({\r\n        email: this.state.email,\r\n        password: this.state.password,\r\n        firstName: this.state.firstName,\r\n        lastName: this.state.lastName,\r\n        address: this.state.address,\r\n        phoneNumber: this.state.phoneNumber,\r\n        gender: this.state.gender,\r\n        roleId: this.state.role,\r\n        positionId: this.state.position,\r\n        avatar: this.state.avatar\r\n      })\r\n    }\r\n    if (action === CRUD_ACTIONS.EDIT) {\r\n      this.props.editUserRedux({\r\n        id: this.state.userEditId,\r\n        email: this.state.email,\r\n        password: this.state.password,\r\n        firstName: this.state.firstName,\r\n        lastName: this.state.lastName,\r\n        address: this.state.address,\r\n        phoneNumber: this.state.phoneNumber,\r\n        gender: this.state.gender,\r\n        roleId: this.state.role,\r\n        positionId: this.state.position,\r\n        avatar: this.state.avatar\r\n      })\r\n    }\r\n\r\n\r\n  }\r\n  checkValidateInput = () => {\r\n    let isValid = true;\r\n    let arrCheck = ['email', 'password', 'firstName', 'lastName', 'address', 'phoneNumber']\r\n    for (let i = 0; i < arrCheck.length; i++) {\r\n      if (!this.state[arrCheck[i]]) {\r\n        isValid = false;\r\n        alert('This input is required: ' + arrCheck[i]);\r\n        break;\r\n      }\r\n    }\r\n    return isValid;\r\n  }\r\n  onChangeInput = (event, id) => {\r\n    let copyState = { ...this.state }\r\n    copyState[id] = event.target.value;\r\n    this.setState({\r\n      ...copyState,\r\n    })\r\n  }\r\n\r\n  handleEditUserFromParent = (user) => {\r\n    let imageBase64 = '';\r\n    if (user.image) {\r\n      imageBase64 = new Buffer(user.image, 'base64').toString('binary');\r\n      //Buffer cung cấp cách xử lý dữ liệu dạng nhị phân, \r\n      //câu lệnh trên xử lý dữ liệu BLOB (được mã hóa là base64) sang dữ liệu binary \r\n    }\r\n    this.setState({\r\n      email: user.email,\r\n      password: '????????????????????????????????????????',\r\n      firstName: user.firstName,\r\n      lastName: user.lastName,\r\n      phoneNumber: user.phoneNumber,\r\n      address: user.address,\r\n      gender: user.gender,\r\n      role: user.roleId,\r\n      position: user.positionId,\r\n      avatar: '',\r\n      previewImgURL: imageBase64,\r\n      action: CRUD_ACTIONS.EDIT,\r\n      userEditId: user.id\r\n    })\r\n  }\r\n  render() {\r\n    let genders = this.state.genderArr;\r\n    let positions = this.state.positionArr;\r\n    let roleIds = this.state.roleIdArr;\r\n    let isGetGenders = this.props.isLoadingGenders;\r\n    let language = this.props.language;\r\n    let { email, password, firstName, lastName, phoneNumber, address, gender, position, role\r\n      , avatar } = this.state;\r\n    //đây là cách viết của ES7\r\n    return (\r\n\r\n      <div className=\"user-redux-container\" >\r\n        <div className=\"title\">\r\n          <FormattedMessage id=\"create-user.title\" />\r\n        </div>\r\n        <div className=\"user-redux-body\">\r\n          <div className=\"container\">\r\n            <div className=\"row\">\r\n              <div className=\"col-12\">\r\n                {isGetGenders === true ? 'Loading...' : ''}\r\n              </div>\r\n              <div className=\"col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServerUsername\"> <FormattedMessage id=\"create-user.email\" /></label>\r\n                <div className=\"input-group\">\r\n                  <div className=\"input-group-prepend\">\r\n                    <span className=\"input-group-text\" id=\"inputGroupPrepend3\">@</span>\r\n                  </div>\r\n                  <input type=\"email\" className=\"form-control\" id=\"validationServerUsername\" placeholder=\"...\" aria-describedby=\"inputGroupPrepend3\" required\r\n                    value={email}\r\n                    onChange={(event) => { this.onChangeInput(event, 'email') }}\r\n                    disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false} />\r\n\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServerUsername\"> <FormattedMessage id=\"create-user.password\" /></label>\r\n                <div className=\"input-group\">\r\n\r\n                  <input type=\"password\" className=\"form-control \" id=\"validationServerUsername\" placeholder=\"...\"\r\n                    aria-describedby=\"inputGroupPrepend3\" required\r\n                    value={password}\r\n                    onChange={(event) => { this.onChangeInput(event, 'password') }}\r\n                    disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false} />\r\n\r\n                </div>\r\n              </div>\r\n              <div className=\"col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServer01\"> <FormattedMessage id=\"create-user.firstname\" /></label>\r\n                <input type=\"text\" className=\"form-control \" id=\"validationServer01\" placeholder=\"...\" required\r\n                  value={firstName}\r\n                  onChange={(event) => { this.onChangeInput(event, 'firstName') }} />\r\n\r\n              </div>\r\n              <div className=\"col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServer02\"> <FormattedMessage id=\"create-user.lastname\" /></label>\r\n                <input type=\"text\" className=\"form-control \" id=\"validationServer02\" placeholder=\"...\" required\r\n                  value={lastName}\r\n                  onChange={(event) => { this.onChangeInput(event, 'lastName') }} />\r\n\r\n              </div>\r\n\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"form-group col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServerUsername\"> <FormattedMessage id=\"create-user.roleid\" /></label>\r\n                <select id=\"inputState\" className=\"form-control\"\r\n\r\n                  onChange={(event) => { this.onChangeInput(event, 'role') }}\r\n                  value={role}>\r\n                  {roleIds && roleIds.length > 0 && roleIds.map((item, index) => {\r\n                    return (\r\n                      <option key={index} value={item.keyMap}>\r\n                        {language === LANGUAGES.VI ? item.valueVi : item.valueEn}</option>\r\n                    )\r\n                  })\r\n                  }\r\n                </select>\r\n              </div>\r\n              <div className=\"form-group col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServerUsername\"> <FormattedMessage id=\"create-user.position\" /></label>\r\n\r\n                <select id=\"inputState\" className=\"form-control\"\r\n                  onChange={(event) => { this.onChangeInput(event, 'position') }}\r\n                  value={position}>\r\n                  {positions && positions.length > 0 && positions.map((item, index) => {\r\n                    return (\r\n                      <option key={index} value={item.keyMap}>\r\n                        {language === LANGUAGES.VI ? item.valueVi : item.valueEn}</option>\r\n                    )\r\n                  })\r\n                  }\r\n                </select>\r\n\r\n              </div>\r\n              <div className=\"form-group col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServer01\"> <FormattedMessage id=\"create-user.gender\" /></label>\r\n\r\n                <select id=\"inputState\" className=\"form-control\"\r\n                  onChange={(event) => { this.onChangeInput(event, 'gender') }}\r\n                  value={gender}>\r\n                  {genders && genders.length > 0 && genders.map((item, index) => {\r\n                    return (\r\n                      <option key={index} value={item.keyMap}>\r\n                        {language === LANGUAGES.VI ? item.valueVi : item.valueEn}</option>\r\n                    )\r\n                  })\r\n                  }\r\n\r\n                </select>\r\n\r\n              </div>\r\n              <div className=\"col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServer04\"> <FormattedMessage id=\"create-user.phonenumber\" /></label>\r\n                <input type=\"text\" className=\"form-control \" id=\"validationServer04\" placeholder=\"...\" required\r\n                  value={phoneNumber}\r\n                  onChange={(event) => { this.onChangeInput(event, 'phoneNumber') }} />\r\n\r\n              </div>\r\n\r\n\r\n            </div>\r\n            <div className=\"row\">\r\n              <div className=\"col-md-9 mb-3\">\r\n                <label htmlFor=\"validationServer03\"> <FormattedMessage id=\"create-user.address\" /></label>\r\n                <input type=\"text\" className=\"form-control \" id=\"validationServer03\" placeholder=\"...\" required\r\n                  value={address}\r\n                  onChange={(event) => { this.onChangeInput(event, 'address') }} />\r\n\r\n              </div>\r\n              <div className=\"col-md-3 mb-3\">\r\n                <label htmlFor=\"validationServer02\"> <FormattedMessage id=\"create-user.image\" /></label>\r\n                <div className=\"preview-img-container\">\r\n                  <input id=\"previewImg\" type=\"file\" hidden\r\n                    onChange={(event) => this.handleOnChangeImage(event)} />\r\n                  <label className=\"label-upload\" htmlFor=\"previewImg\">Upload<i className=\"fa-solid fa-upload\"></i></label>\r\n                  <div className=\"preview-image\" style={{ backgroundImage: `url(${this.state.previewImgURL})` }}\r\n                    onClick={() => this.openPreviewImage()}\r\n                  >\r\n\r\n                  </div>\r\n                </div>\r\n\r\n\r\n              </div>\r\n\r\n            </div>\r\n\r\n\r\n            <div className=\"form-group\">\r\n              <div className=\"form-check\">\r\n                <input className=\"form-check-input is-invalid\" type=\"checkbox\" value=\"\" id=\"invalidCheck3\" required />\r\n                <label className=\"form-check-label\" htmlFor=\"invalidCheck3\">\r\n                  <FormattedMessage id=\"create-user.agree\" />\r\n                </label>\r\n                <div className=\"invalid-feedback\">\r\n                  <FormattedMessage id=\"create-user.confirm\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"col-12 my-3\">\r\n              <button className={this.state.action === CRUD_ACTIONS.EDIT ? \"btn btn-warning\" : \"btn btn-primary\"} type=\"submit\"\r\n                onClick={() => this.handleSaveUser()}>\r\n                {this.state.action === CRUD_ACTIONS.EDIT ?\r\n                  <FormattedMessage id=\"manage-user.edit\"></FormattedMessage>\r\n                  : <FormattedMessage id=\"manage-user.save\"></FormattedMessage>}\r\n                {/* <FormattedMessage id=\"create-user.submit\"/> */}\r\n              </button>\r\n            </div>\r\n            <div className=\"col-12 mb-5\">\r\n              <TableManageUser\r\n                handleEditUserFromParentKey={this.handleEditUserFromParent}\r\n                action={this.state.action} />\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n        {this.state.isOpen === true &&\r\n          <Lightbox\r\n            mainSrc={this.state.previewImgURL}\r\n            onCloseRequest={() => this.setState({ isOpen: false })} />}\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    language: state.app.language,\r\n    genderRedux: state.admin.genders,\r\n    positionRedux: state.admin.positions,\r\n    roleIdRedux: state.admin.roleIds,\r\n    isLoadingGenders: state.admin.loadingGenders,\r\n    listUsers: state.admin.users\r\n  };\r\n};\r\n//những cái biến state ở trên hàm mapStateToProps được khai báo trùng với các biến ở trên file này, không cần khai báo ở file\r\n//khác và có thể sử dụng ở file khác, vế trái là ta tự khai báo\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    getGenderStart: () => dispatch(actions.fetchGenderStart()),\r\n    getPositionStart: () => dispatch(actions.fetchPositionStart()),\r\n    getRoleIdStart: () => dispatch(actions.fetchRoleIdStart()),\r\n    createNewUser: (data) => dispatch(actions.createNewUser(data)),\r\n    fetchUserRedux: () => dispatch(actions.fetchAllUsersStart()),\r\n    editUserRedux: (data) => dispatch(actions.editUser(data))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserRedux);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\actions\\adminActions.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\store\\reducers\\adminReducer.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\TableManageUser.js",["374","375","376","377"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './TableManageUser.scss';\r\nimport * as actions from \"../../store/actions\";\r\nimport MarkdownIt from 'markdown-it';\r\n\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nconst mdParser = new MarkdownIt();\r\nfunction handleEditorChange({ html, text }) {\r\n    console.log('check edit change', html, text);\r\n}\r\n\r\n// nếu muốn import 1 function thì ta dùng dấu ngoặc nhọn\r\nclass TableManageUser extends Component {\r\n    // PROPS stands for properties and is being used for passing data from one component to another.\r\n    // But the important part here is that data with props are being passed in a uni-directional flow. ( one way from parent to child)\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            usersRedux: []\r\n        }\r\n    }\r\n    //để lưu giá trị của 1 biến components, ta dùng state\r\n    //Component là một block code độc lập để phân chia các UI (giao diện người dùng) thành các phân nhỏ riêng lẻ để dễ dàng quản lý và tái sử dụng.\r\n    componentDidMount() {\r\n        this.props.fetchUserRedux();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.listUsers !== this.props.listUsers) {\r\n            this.setState({\r\n                usersRedux: this.props.listUsers,\r\n            })\r\n        }\r\n    }\r\n\r\n    handleDeleteUser = (user) => {\r\n        this.props.deleteUserRedux(user.id);\r\n    }\r\n\r\n    handleEditUser = (user) => {\r\n        this.props.handleEditUserFromParentKey(user)\r\n    }\r\n    render() {\r\n\r\n\r\n        //khi muốn render ra 1 thứ gì đó trong react, chúng ta phải có hàm return, và trong đó bắt buộc là 1 khối\r\n        let arrUsers = this.state.usersRedux;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"users-container\">\r\n\r\n\r\n\r\n\r\n                    <div className=\"users-table mt-3 mx-1\">\r\n                        <div className=\"title text-center\">Manage Users</div>\r\n                        <table id=\"TableManageUser\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Email</th>\r\n                                    <th>First name</th>\r\n                                    <th>Last name</th>\r\n                                    <th>Address</th>\r\n                                    <th>ROLE</th>\r\n                                    <th>Actions</th>\r\n                                </tr>\r\n                                {arrUsers && arrUsers.length > 0 && arrUsers.map((item, index) => {\r\n                                    // để duyệt 1 vòng lặp, ta có thể dùng function map(), bắt buộc phải return ra 1 thứ gì đó\r\n                                    // thì function map() mới hoạt động được\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td>{item.email}</td>\r\n                                            <td>{item.firstName}</td>\r\n                                            <td>{item.lastName}</td>\r\n                                            <td>{item.address}</td>\r\n                                            <td>{item.roleId}</td>\r\n                                            <td>\r\n                                                <button className=\"btn-edit\"\r\n                                                    onClick={() => this.handleEditUser(item)}><i className=\"fa-solid fa-pencil\"></i></button>\r\n                                                <button className=\"btn-delete\" onClick={() => this.handleDeleteUser(item)}><i className=\"fa-solid fa-trash\"></i></button>\r\n                                                {/* item là 1 object lưu trữ tất cả thông tin của người dùng */}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n               \r\n            </React.Fragment>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        listUsers: state.admin.users\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchUserRedux: () => dispatch(actions.fetchAllUsersStart()),\r\n        deleteUserRedux: (id) => dispatch(actions.deleteUser(id)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableManageUser);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\ManageDoctor.js",["378","379","380","381","382"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { CRUD_ACTIONS, LANGUAGES } from '../../utils';\r\nimport './ManageDoctor.scss';\r\nimport * as actions from \"../../store/actions\";\r\n//import actions ở trên để lấy data\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nimport Select from 'react-select';\r\nimport { getDetailInforDoctor } from '../../services/userService';\r\nconst mdParser = new MarkdownIt();\r\n\r\n// nếu muốn import 1 function thì ta dùng dấu ngoặc nhọn\r\nclass ManageDoctor extends Component {\r\n    // PROPS stands for properties and is being used for passing data from one component to another.\r\n    // But the important part here is that data with props are being passed in a uni-directional flow. ( one way from parent to child)\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //Lưu vào bảng markdown\r\n            contentMarkdown: '',\r\n            contentHTML: '',\r\n            //tạo hai biến content này để lưu giá trị kiểu text và lưu gia trị kiểu html\r\n            selectedDoctor: '',\r\n            description: '',\r\n            listDoctors: [],\r\n            hasOldData: false,\r\n\r\n            //lưu vào bảng doctor_infor\r\n            listPrice: [],\r\n            listPayment: [],\r\n            listProvince: [],\r\n            listClinic: [],\r\n            listSpecialty: [],\r\n            selectedPrice: '',\r\n            selectedPayment: '',\r\n            selectProvince: '',\r\n            selectedClinic: '', \r\n            selectedSpecialty: '',\r\n            nameClinic: '',\r\n            addressClinic: '',\r\n            note: '',\r\n            clinicId: '',\r\n            specialtyId: ''\r\n\r\n        }\r\n    }\r\n    //để lưu giá trị của 1 biến components, ta dùng state\r\n    //Component là một block code độc lập để phân chia các UI (giao diện người dùng) thành các phân nhỏ riêng lẻ để dễ dàng quản lý và tái sử dụng.\r\n\r\n    componentDidMount() {\r\n        this.props.fetchAllDoctors()\r\n        //tất cả dữ liệu lấy được từ fetchAllDoctors, getAllRequiredDoctorInfor sẽ được ghi vào props cha, cụ thể là this.props;\r\n        this.props.getAllRequiredDoctorInfor();\r\n    }\r\n    buildDataInputSelect = (inputData, type) => {\r\n        console.log(\"check input data\", inputData)\r\n        //inputData đã được lấy từ componentDidMount(), cụ thể là this.props; \r\n        let result = [];\r\n        let { language } = this.props;\r\n        if (inputData && inputData.length > 0) {\r\n            if (type === 'USERS') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    let labelEn = `${item.lastName} ${item.firstName} `;\r\n                    let labelVi = `${item.firstName} ${item.lastName}`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.id;\r\n                    result.push(object);\r\n                })\r\n            }\r\n            if (type === 'PRICE') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    let labelEn = `${item.valueEn} USD`;\r\n                    let labelVi = `${item.valueVi}`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.keyMap;\r\n                    result.push(object);\r\n                })\r\n            }\r\n            if (type === 'PAYMENT' || type === 'PROVINCE') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    let labelEn = `${item.valueEn}`;\r\n                    let labelVi = ` ${item.valueVi }`;\r\n                    object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                    object.value = item.keyMap;\r\n                    result.push(object);\r\n                })\r\n            }\r\n            if (type === 'SPECIALTY') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    object.label = item.name;\r\n                    object.value = item.id;\r\n                    result.push(object);\r\n                })\r\n            }\r\n            if (type === 'CLINIC') {\r\n                inputData.map((item, index) => {\r\n                    let object = {};\r\n                    object.label = item.name;\r\n                    object.value = item.id;\r\n                    result.push(object);\r\n                })\r\n            }\r\n\r\n        }\r\n        return result;\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.allDoctors !== this.props.allDoctors) {\r\n            //allDoctors đã được lấy từ file AdminReducer\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors, 'USERS')\r\n            this.setState({\r\n                listDoctors: dataSelect\r\n            })\r\n        }\r\n        if (prevProps.allRequiredDoctorInfor !== this.props.allRequiredDoctorInfor) {\r\n            let { resPayment, resPrice, resProvince, resSpecialty, resClinic } = this.props.allRequiredDoctorInfor;\r\n            let dataSelectPrice = this.buildDataInputSelect(resPrice, 'PRICE');\r\n            let dataSelectPayment = this.buildDataInputSelect(resPayment, 'PAYMENT');\r\n            let dataSelectProvince = this.buildDataInputSelect(resProvince, 'PROVINCE');\r\n            let dataSelectSpecialty = this.buildDataInputSelect(resSpecialty, 'SPECIALTY');\r\n            let dataSelectClinic = this.buildDataInputSelect(resClinic, 'CLINIC');\r\n            console.log('bao phuc check data new: ', dataSelectPrice, dataSelectPayment, dataSelectProvince,\r\n                dataSelectSpecialty, dataSelectClinic);\r\n            this.setState({\r\n                listPrice: dataSelectPrice,\r\n                listPayment: dataSelectPayment,\r\n                listProvince: dataSelectProvince,\r\n                listSpecialty: dataSelectSpecialty,\r\n                listClinic: dataSelectClinic\r\n            })\r\n        }\r\n        if (prevProps.language !== this.props.language) {\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors, 'USERS');\r\n            let { resPrice, resPayment, resProvince, resSpecialty, resClinic } = this.props.allRequiredDoctorInfor;\r\n            let dataSelectPrice = this.buildDataInputSelect(resPrice, 'PRICE');\r\n            let dataSelectPayment = this.buildDataInputSelect(resPayment, 'PAYMENT');\r\n            let dataSelectProvince = this.buildDataInputSelect(resProvince, 'PROVINCE');\r\n            let dataSelectSpecialty = this.buildDataInputSelect(resSpecialty, 'SPECIALTY');\r\n            let dataSelectClinic = this.buildDataInputSelect(resClinic, 'CLINIC');\r\n            this.setState({\r\n                listDoctors: dataSelect,\r\n                listProvince: dataSelectProvince,\r\n                listPrice: dataSelectPrice,\r\n                listPayment: dataSelectPayment,\r\n                listSpecialty: dataSelectSpecialty,\r\n                listClinic: dataSelectClinic\r\n\r\n            })\r\n\r\n        }\r\n    }\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            contentMarkdown: text,\r\n            contentHTML: html,\r\n        })\r\n    }\r\n\r\n    handleSaveContentMarkdown = () => {\r\n        let { hasOldData } = this.state;\r\n        this.props.saveDetailDoctor({\r\n            contentHTML: this.state.contentHTML,\r\n            contentMarkdown: this.state.contentMarkdown,\r\n            description: this.state.description,\r\n            doctorId: this.state.selectedDoctor.value,\r\n            action: hasOldData === true ? CRUD_ACTIONS.EDIT : CRUD_ACTIONS.CREATE,\r\n            selectedPrice: this.state.selectedPrice.value,\r\n            selectedPayment: this.state.selectedPayment.value,\r\n            selectProvince: this.state.selectProvince.value,\r\n            nameClinic: this.state.nameClinic,\r\n            addressClinic: this.state.addressClinic,\r\n            note: this.state.note,\r\n            clinicId:  this.state.selectedClinic.value,\r\n            specialtyId: this.state.selectedSpecialty.value\r\n\r\n            //doctorId: this.state.selectedDoctor.value dùng để gán giá trị item.id cho doctorId rồi lưu vào db\r\n        })\r\n    }\r\n    handleChangeSelect = async (selectedDoctor) => {\r\n        this.setState({ selectedDoctor }, () =>\r\n            console.log(`Doctor selected:`, this.state.selectedDoctor)\r\n        );\r\n        let {listPayment,listPrice,listProvince, listSpecialty, listClinic} = this.state;\r\n        let res = await getDetailInforDoctor(selectedDoctor.value);\r\n        if (res && res.errCode === 0 && res.data && res.data.Markdown) {\r\n            let markdown = res.data.Markdown;\r\n            let addressClinic = '', nameClinic = '', note='',paymentId = '',\r\n            priceId = '', provinceId = '',selectedPayment='', selectedPrice = '',\r\n             selectProvince='', selectedSpecialty='', specialtyId='',\r\n             clinicId='', selectedClinic = '';\r\n            if(res.data.Doctor_Infor){\r\n                addressClinic = res.data.Doctor_Infor.addressClinic;\r\n                nameClinic = res.data.Doctor_Infor.nameClinic;\r\n                note = res.data.Doctor_Infor.note;\r\n                paymentId = res.data.Doctor_Infor.paymentId;\r\n                priceId = res.data.Doctor_Infor.priceId;\r\n                provinceId = res.data.Doctor_Infor.provinceId;\r\n                specialtyId = res.data.Doctor_Infor.specialtyId;\r\n                clinicId = res.data.Doctor_Infor.clinicId;\r\n                selectedPayment = listPayment.find(item => {\r\n                    return item && item.value ===paymentId\r\n                })\r\n                selectedPrice = listPrice.find(item => {\r\n                    return item && item.value === priceId\r\n                })\r\n                selectProvince = listProvince.find(item => {\r\n                    return item && item.value === provinceId\r\n                })\r\n                selectedSpecialty = listSpecialty.find(item => {\r\n                    return item && item.value === specialtyId\r\n                })\r\n                selectedClinic = listClinic.find(item => {\r\n                    return item && item.value === clinicId\r\n                })\r\n            }\r\n            this.setState({\r\n                contentHTML: markdown.contentHTML,\r\n                contentMarkdown: markdown.contentMarkdown,\r\n                description: markdown.description,\r\n                hasOldData: true,\r\n                addressClinic: addressClinic,\r\n                nameClinic: nameClinic,\r\n                note: note,\r\n                selectedPayment: selectedPayment,\r\n                selectedPrice: selectedPrice,\r\n                selectProvince: selectProvince,\r\n                selectedSpecialty: selectedSpecialty,\r\n                selectedClinic: selectedClinic\r\n            })\r\n            //để lấy thông tin từ bảng markdown rồi in ra màn hình, ta có thể gọi api như trên, rồi dùng hàm setState\r\n        } else {\r\n            this.setState({\r\n                contentHTML: '',\r\n                contentMarkdown: '',\r\n                description: '',\r\n                hasOldData: false,\r\n                addressClinic: '',\r\n                nameClinic: '',\r\n                note: '',\r\n                selectedPayment: '',\r\n                selectedPrice: '',\r\n                selectProvince: '',\r\n                selectedSpecialty: '',\r\n                selectedClinic: ''\r\n            })\r\n        }\r\n\r\n    };\r\n    handleChangeSelectDoctorInfor = async (selectedDoctor, name) => {\r\n        let stateName = name.name;\r\n        let stateCopy = { ...this.state };\r\n        stateCopy[stateName] = selectedDoctor;\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n    handleOnChangeText = (event, id) => {\r\n        let stateCopy = { ...this.state };\r\n        stateCopy[id] = event.target.value;\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n    //thêm id vào để tái tận dụng cho các state khác nhau, chỉ việc thay id = tên state chúng ta muốn ở các component là dùng được.\r\n    render() {\r\n\r\n        let { hasOldData } = this.state;\r\n        //khi muốn render ra 1 thứ gì đó trong react, chúng ta phải có hàm return, và trong đó bắt buộc là 1 khối\r\n\r\n        return (\r\n            <div className='manage-doctor-container'>\r\n                <div className=\"users-container\">\r\n                    <div className=\"users-table mt-3 mx-1\">\r\n                        <div className=\"title text-center\">\r\n                            <FormattedMessage id=\"admin.manage-doctor.title\" />\r\n                        </div>\r\n                        <div className=\" more-info\">\r\n                            <div className=\"content-left form-group\">\r\n\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.select-doctor\" /></label>\r\n                                <Select\r\n                                    value={this.state.selectedDoctor}\r\n                                    onChange={this.handleChangeSelect}\r\n                                    options={this.state.listDoctors}\r\n                                    placeholder={<FormattedMessage id=\"admin.manage-doctor.select-doctor\" />}\r\n                                />\r\n                            </div>\r\n                            <div className=\"content-right\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.intro\" /></label>\r\n                                <textarea className=\"form-control\" rows=\"4\"\r\n                                    onChange={(event) => this.handleOnChangeText(event, 'description')}\r\n                                    value={this.state.description}>\r\n                                    ...\r\n                                </textarea>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\" more-infor-extra row\">\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.price\" /></label>\r\n                                <Select\r\n                                    value={this.state.selectedPrice}\r\n                                    onChange={this.handleChangeSelectDoctorInfor}\r\n                                    options={this.state.listPrice}\r\n                                    placeholder={<FormattedMessage id=\"admin.manage-doctor.price\" />}\r\n                                    name=\"selectedPrice\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.payment\" /></label>\r\n                                <Select\r\n                                    value={this.state.selectedPayment}\r\n                                    onChange={this.handleChangeSelectDoctorInfor}\r\n                                    options={this.state.listPayment}\r\n                                    placeholder={<FormattedMessage id=\"admin.manage-doctor.payment\" />}\r\n                                    name=\"selectedPayment\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.province\" /></label>\r\n                                <Select\r\n                                    value={this.state.selectProvince}\r\n                                    onChange={this.handleChangeSelectDoctorInfor}\r\n                                    options={this.state.listProvince}\r\n                                    placeholder={<FormattedMessage id=\"admin.manage-doctor.province\" />}\r\n                                    name=\"selectProvince\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.nameClinic\" /></label>\r\n                                <input className=\"form-control\"\r\n                                    onChange={(event)=> this.handleOnChangeText(event, 'nameClinic')}\r\n                                    value={this.state.nameClinic}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.addressClinic\" /></label>\r\n                                <input className=\"form-control\"\r\n                                    onChange={(event) => this.handleOnChangeText(event, 'addressClinic')}\r\n                                    value={this.state.addressClinic}\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.select-clinic\" /></label>\r\n                                <Select\r\n                                    value={this.state.selectedClinic}\r\n                                    onChange={this.handleChangeSelectDoctorInfor}\r\n                                    options={this.state.listClinic}\r\n                                    placeholder={<FormattedMessage id=\"admin.manage-doctor.select-clinic\" />}\r\n                                    name=\"selectedClinic\"\r\n                                />\r\n                               \r\n                            </div>\r\n\r\n                            \r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-4 form-group\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.specialty\" /></label>\r\n                                <Select\r\n                                    value={this.state.selectedSpecialty}\r\n                                    onChange={this.handleChangeSelectDoctorInfor}\r\n                                    options={this.state.listSpecialty}\r\n                                    placeholder={<FormattedMessage id=\"admin.manage-doctor.specialty\" />}\r\n                                    name=\"selectedSpecialty\"\r\n                                />\r\n                            </div>\r\n                           \r\n                            <div className=\"col-8 form-group\">\r\n                                <label><FormattedMessage id=\"admin.manage-doctor.note\" /></label>\r\n                                <input className=\"form-control\"\r\n                                    onChange={(event) => this.handleOnChangeText(event, 'note')}\r\n                                    value={this.state.note}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"container-fluid manage-doctor-editor\">\r\n                        <MdEditor style={{ height: '300px' }} renderHTML={text => mdParser.render(text)}\r\n                            onChange={this.handleEditorChange}\r\n                            value={this.state.contentMarkdown} />\r\n                    </div>\r\n                </div>\r\n\r\n                <button\r\n                    onClick={() => this.handleSaveContentMarkdown()}\r\n                    className={hasOldData === true ? \"save-content-doctor\" : \"create-content-doctor\"}>\r\n                    {hasOldData === true ?\r\n                        <span>\r\n                            <FormattedMessage id=\"admin.manage-doctor.save\" />\r\n                        </span> : <span><FormattedMessage id=\"admin.manage-doctor.add\" /></span>}</button>\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        allDoctors: state.admin.allDoctors,\r\n        allRequiredDoctorInfor: state.admin.allRequiredDoctorInfor,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n        getAllRequiredDoctorInfor: () => dispatch(actions.getRequiredDoctorInfor()),\r\n        saveDetailDoctor: (data) => dispatch(actions.saveDetailDoctor(data))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageDoctor);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\DetailDoctor.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\Doctor.js",["383","384"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport ManageSchedule from '../containers/Patient/Doctor/ManageSchedule';\r\nimport Header from '../containers/Header/Header';\r\nimport ManagePatient from '../containers/System/Doctor/ManagePatient';\r\nclass Doctor extends Component {\r\n    // PROPS stands for properties and is being used for passing data from one component to another.\r\n    // But the important part here is that data with props are being passed in a uni-directional flow. ( one way from parent to child)\r\n\r\n    //để lưu giá trị của 1 biến components, ta dùng state\r\n    //Component là một block code độc lập để phân chia các UI (giao diện người dùng) thành các phân nhỏ riêng lẻ để dễ dàng quản lý và tái sử dụng.\r\n\r\n\r\n    render() {\r\n        const { isLoggedIn } = this.props;\r\n\r\n        //khi muốn render ra 1 thứ gì đó trong react, chúng ta phải có hàm return, và trong đó bắt buộc là 1 khối\r\n\r\n\r\n        return (\r\n            <React.Fragment>\r\n                {isLoggedIn && <Header />}\r\n                <div className=\"container system-container\">\r\n                    <div className=\"system-list\">\r\n                        <Switch>\r\n                            <Route path=\"/doctor/manage-schedule\" component={ManageSchedule} />\r\n                            <Route path=\"/doctor/manage-patient\" component={ManagePatient} />\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n\r\n\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        // language: state.app.language,\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        systemMenuPath: state.app.systemMenuPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Doctor);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\ManageSchedule.js",["385","386","387","388"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './ManageSchedule.scss';\r\nimport Select from 'react-select';\r\nimport * as actions from \"../../../store/actions\";\r\nimport { CRUD_ACTIONS, LANGUAGES, dateFormat } from '../../../utils';\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport moment from 'moment';\r\nimport { toast } from \"react-toastify\";\r\nimport _ from 'lodash';\r\nimport {saveBulkScheduleDoctor} from '../../../services/userService';\r\nclass ManageSchedule extends Component {\r\n    // PROPS stands for properties and is being used for passing data from one component to another.\r\n    // But the important part here is that data with props are being passed in a uni-directional flow. ( one way from parent to child)\r\n\r\n    //để lưu giá trị của 1 biến components, ta dùng state\r\n    //Component là một block code độc lập để phân chia các UI (giao diện người dùng) thành các phân nhỏ riêng lẻ để dễ dàng quản lý và tái sử dụng.\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            listDoctors: [],\r\n            selectedDoctor: {},\r\n            currentDate: '',\r\n            rangeTime: [],\r\n            minDate: moment().calendar(),\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.props.fetchAllDoctors();\r\n        this.props.fetchAllScheduleTimes();\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.allDoctors !== this.props.allDoctors) {\r\n            let dataSelect = this.buildDataInputSelect(this.props.allDoctors)\r\n            this.setState({\r\n                listDoctors: dataSelect\r\n            })\r\n        }\r\n        //Là để check xem khi API đã trả về dữ liệu rồi thì làm gì...\r\n        if (prevProps.allScheduleTime !== this.props.allScheduleTime) {\r\n            let data = this.props.allScheduleTime;\r\n            if (data && data.length > 0) {\r\n                data = data.map(item => ({ ...item, isSelected: false }))\r\n            }\r\n            this.setState({\r\n                rangeTime: data\r\n            })\r\n        }\r\n    }\r\n    buildDataInputSelect = (inputData) => {\r\n        //chúng ta có thể đặt là inputData hoặc gì cũng ok, vì nó phụ thuộc vào props ở bên dưới\r\n        let result = [];\r\n        let { language } = this.props;\r\n        if (inputData && inputData.length > 0) {\r\n          \r\n            inputData.map((item, index) => {\r\n                let object = {};\r\n                let labelEn = `${item.lastName} ${item.firstName}`;\r\n                let labelVi = `${item.firstName} ${item.lastName}`;\r\n                object.label = language === LANGUAGES.VI ? labelVi : labelEn;\r\n                object.value = item.id;\r\n                result.push(object)\r\n            })\r\n          \r\n        }\r\n        return result;\r\n        \r\n    }\r\n    handleChangeSelect = async (selectedOption) => {\r\n        this.setState({ selectedDoctor: selectedOption });\r\n    }\r\n    handleOnChangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0]\r\n            //thư viện date này sẽ trả về 1 array nhiều phần tử\r\n            // nếu ta bấm liên tục nhiều lần, vì vậy date[0] là để lấy giá trị ngày đầu tiên trong array\r\n        })\r\n    }\r\n    handleClickBtnTime = (time) => {\r\n        let { rangeTime } = this.state;\r\n        if (rangeTime && rangeTime.length > 0) {\r\n            rangeTime = rangeTime.map(item => {\r\n                if (item.id === time.id) item.isSelected = !item.isSelected;\r\n                return item;\r\n            })\r\n            this.setState({\r\n                rangeTime: rangeTime\r\n            })\r\n        }\r\n    }\r\n    handleSaveSchedule = async () => {\r\n        let { rangeTime, selectedDoctor, currentDate } = this.state;\r\n        let result = [];\r\n        if (!currentDate) {\r\n            toast.error(\"Invalid date!\");\r\n            \r\n        }\r\n        if (selectedDoctor && _.isEmpty(selectedDoctor)) {\r\n            toast.error(\"Invalid selected doctor! \");\r\n          console.log('check doctor: ', this.state)\r\n            return;\r\n        }\r\n\r\n        let formatedDate = new Date(currentDate).getTime();\r\n        \r\n        if (rangeTime && rangeTime.length > 0) {\r\n            let selectedTime = rangeTime.filter(item => item.isSelected === true);\r\n            if (selectedTime && selectedTime.length > 0) {\r\n                selectedTime.map((schedule, index) => {\r\n                    // chúng ta thay schedule bằng cái gì cũng được, react tự hiểu đấy là 1 phần tử của arr đó\r\n                    let object = {};\r\n                    object.doctorId = selectedDoctor.value;\r\n                    object.date = formatedDate;\r\n                    object.timeType = schedule.keyMap;\r\n                    result.push(object);\r\n                })\r\n            } else {\r\n                toast.error(\"Invalid selected time! \");\r\n                return;\r\n            }\r\n        }\r\n        let res = await saveBulkScheduleDoctor({\r\n            arrSchedule: result,\r\n            doctorId: selectedDoctor.value,\r\n            formatedDate: formatedDate\r\n        })\r\n        if(res && res.errCode === 0){\r\n            toast.success(\"Save Infor succeed!\");\r\n        }else{\r\n            toast.error(\"error saveBulkScheduleDoctor \");\r\n            console.log('error saveBulkScheduleDoctor >>> res: ', res)\r\n        }\r\n        console.log('bao phuc check result: ', result);\r\n        console.log('check res: saveBulkScheduleDoctor : ', res);\r\n    }\r\n    render() {\r\n        let { rangeTime } = this.state;\r\n        let { language } = this.props;\r\nlet today = new Date(new Date().setDate(new Date().getDate()));\r\n        //khi muốn render ra 1 thứ gì đó trong react, chúng ta phải có hàm return, và trong đó bắt buộc là 1 khối\r\n\r\n\r\n        return (\r\n            <div className=\"manage-schedule-container\">\r\n                <div className=\"m-s-title\">\r\n                    <FormattedMessage id=\"manage-schedule.title\"></FormattedMessage>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6 form-group\">\r\n                            <label>\r\n                                <FormattedMessage id=\"manage-schedule.choose-doctor\" /> </label>\r\n                            <Select\r\n                                value={this.state.selectedDoctor}\r\n                                onChange={this.handleChangeSelect}\r\n                                options={this.state.listDoctors}\r\n                            />\r\n\r\n                        </div>\r\n                        <div className=\"col-6 form-group\">\r\n                            <label>\r\n                                <FormattedMessage id=\"manage-schedule.choose-date\" /> </label>\r\n                            <DatePicker\r\n                                value={this.state.currentDate}\r\n                                className=\"form-control\"\r\n                                onChange={this.handleOnChangeDatePicker}\r\n                                minDate={today}\r\n                                //minDate là để lấy ngày hiện tại\r\n                            />\r\n\r\n                        </div>\r\n                        <div className=\"col-12 pick-hour-container\">\r\n                            {rangeTime && rangeTime.length > 0 &&\r\n                                rangeTime.map((item, index) => {\r\n                                    return (\r\n                                        <button className={item.isSelected === true ?\r\n                                            \"btn btn-schedule active\" : \"btn btn-schedule\"}\r\n                                            key={index} onClick={() => this.handleClickBtnTime(item)}>\r\n                                            {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                                        </button>\r\n                                    )\r\n                                })}\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <button className=\"btn btn-primary btn-save-schedule\"\r\n                                onClick={() => this.handleSaveSchedule()}>\r\n                                <FormattedMessage id=\"manage-schedule.save\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        allDoctors: state.admin.allDoctors,\r\n        allScheduleTime: state.admin.allScheduleTime,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchAllDoctors: () => dispatch(actions.fetchAllDoctors()),\r\n        fetchAllScheduleTimes: () => dispatch(actions.fetchAllScheduleTimes())\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSchedule);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\Input\\DatePicker.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\DoctorSchedule.js",["389"],"import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport './DoctorSchedule.scss';\r\nimport moment from 'moment';\r\nimport localization from 'moment/locale/vi';\r\n//import locale như vậy để moment hiểu và ưu tiên việc xử lý tiếng việt(trong time)\r\nimport { LANGUAGES } from '../../../utils';\r\nimport { getScheduleDoctorByDate } from '../../../services/userService';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport BookingModal from './Modal/BookingModal';\r\nclass DoctorSchedule extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allDays: [],\r\n            allAvailableTime: [],\r\n            isOpenModalBooking: false,\r\n            dataScheduleTimeModal: {},\r\n        }\r\n    }\r\n    async componentDidMount() {\r\n        let { language } = this.props;\r\n        let allDays = this.getArrDays(language);\r\n        if(this.props.doctorIdFromParent){\r\n            let res = await getScheduleDoctorByDate(this.props.doctorIdFromParent, allDays[0].value);\r\n            this.setState({\r\n                allAvailableTime: res.data ? res.data : []\r\n            })\r\n        }\r\n        this.setState({\r\n            allDays: allDays,\r\n        })\r\n    }\r\n    capitalizeFirstLetter(string) {\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n    getArrDays = (language) => {\r\n        let allDays = []\r\n        for (let i = 0; i < 7; i++) {\r\n            let object = {};\r\n            if (language === LANGUAGES.VI) {\r\n                if (i === 0) {\r\n                    let ddMM = moment(new Date()).format('DD/MM');\r\n                    let today = `Hôm nay - ${ddMM}`;\r\n                    object.label = today;\r\n                } else {\r\n                    let labelVi = moment(new Date()).add(i, 'days').format('dddd - DD/MM');\r\n                    object.label = this.capitalizeFirstLetter(labelVi)\r\n                }\r\n\r\n            } else {\r\n                if (i === 0) {\r\n                    let ddMM = moment(new Date()).format('DD/MM');\r\n                    let today = `Today - ${ddMM}`;\r\n                    object.label = today;\r\n                } else {\r\n                    object.label = moment(new Date()).add(i, 'days').locale('en').format('dddd - DD/MM');\r\n\r\n                }\r\n\r\n            }\r\n            object.value = moment(new Date()).add(i, 'days').startOf('day').valueOf();\r\n            //startOf là thời gian bắt đầu của new Date, cụ thể là 00:00:00\r\n            //valueOf convert sang dạng milisecond của unix timeStamp\r\n            allDays.push(object);\r\n        }\r\n        //hàm for ở trên dùng để duyệt ngày, vd duyệt lần đầu(i=0), thời gian sẽ là ngày hiện tại add 0,\r\n        //sau đấy lặp dần và tăng tiến, tạo thành ngày mai, ngày kia....\r\n        return allDays;\r\n    }\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n            let allDays = this.getArrDays(this.props.language);\r\n            this.setState({\r\n                allDays: allDays\r\n            })\r\n        }\r\n        if (this.props.doctorIdFromParent !== prevProps.doctorIdFromParent) {\r\n            let allDays = this.getArrDays(this.props.language);\r\n            let res = await getScheduleDoctorByDate(this.props.doctorIdFromParent, allDays[0].value);\r\n            this.setState({\r\n                allAvailableTime: res.data ? res.data : []\r\n            })\r\n        }\r\n    }\r\n    handleOnChangeSelect = async (event) => {\r\n        if (this.props.doctorIdFromParent && this.props.doctorIdFromParent !== -1) {\r\n            let doctorId = this.props.doctorIdFromParent;\r\n            let date = event.target.value\r\n            let res = await getScheduleDoctorByDate(doctorId, date);\r\n            if (res && res.errCode === 0) {\r\n                this.setState({\r\n                    allAvailableTime: res.data ? res.data : []\r\n                })\r\n            }\r\n            console.log('check res', res);\r\n        }\r\n    }\r\n    handleClickScheduleTime =(time)=> {\r\n        this.setState({\r\n            isOpenModalBooking:true,\r\n            dataScheduleTimeModal:time, \r\n        })\r\n      \r\n    }\r\n    closeBookingClose = ()=>{\r\n        this.setState({\r\n            isOpenModalBooking:false\r\n        })\r\n    }\r\n   \r\n    render() {\r\n        let { allDays, allAvailableTime, isOpenModalBooking, dataScheduleTimeModal } = this.state;\r\n        let { language } = this.props;\r\n        return (\r\n            <React.Fragment>\r\n\r\n           \r\n            <div className=\"doctor-schedule-container\">\r\n                <div className=\"all-schedule\">\r\n                    <select onChange={(event) => this.handleOnChangeSelect(event)}>\r\n                        {allDays && allDays.length > 0 &&\r\n                            allDays.map((item, index) => {\r\n                                return (\r\n                                    <option value={item.value}\r\n                                        key={index}>\r\n                                        {item.label}\r\n                                    </option>\r\n                                )\r\n                            })}\r\n                    </select>\r\n                </div>\r\n                <div className=\"all-available-time\">\r\n                    <div className=\"text-calendar\">\r\n                        <i className=\"fa-regular fa-calendar-days\">\r\n                           \r\n                        </i>\r\n                        <span><FormattedMessage id=\"patient.detail-doctor.schedule\" /></span>\r\n                    </div>\r\n                    <div className=\"time-content\">\r\n                        {allAvailableTime && allAvailableTime.length > 0 ?\r\n                        <>\r\n                                <div className=\" time-content-btns\">\r\n                                    {allAvailableTime.map((item, index) => {\r\n                                        let timeDisplay = language === LANGUAGES.VI ?\r\n                                            item.timeTypeData.valueVi : item.timeTypeData.valueEn;\r\n                                        return (\r\n                                            <button key={index}\r\n                                            className={language === LANGUAGES.VI ? 'btn-vie': 'btn-en'}\r\n                                            onClick={()=> this.handleClickScheduleTime(item)}> {timeDisplay}\r\n                                            </button>\r\n                                        )\r\n                                    })\r\n\r\n                                    }\r\n                                </div>\r\n                                <div className=\"book-free\">\r\n                                    <span>\r\n                                        <FormattedMessage id=\"patient.detail-doctor.choose\" />\r\n                                        <i className=\"fa-solid fa-hand-point-up\"></i>\r\n                                        <FormattedMessage id=\"patient.detail-doctor.book-free\" />\r\n                                    </span>\r\n                                </div>\r\n                        </>\r\n                        : <div className= \" no-schedule\">\r\n    <FormattedMessage id=\"patient.detail-doctor.no-schedule\"/>\r\n</div>\r\n    }\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                <BookingModal \r\n                isOpenModal={isOpenModalBooking}\r\n                closeBookingClose= {this.closeBookingClose}\r\n                dataTime={dataScheduleTimeModal}\r\n               />\r\n           \r\n            </React.Fragment>\r\n                    );\r\n           \r\n    }\r\n    \r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n                        language: state.app.language,\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n                    };\r\n};\r\n                    export default connect(mapStateToProps, mapDispatchToProps)(DoctorSchedule);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\DoctorExtraInfor.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\Modal\\BookingModal.js",["390"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './BookingModal.scss';\r\nimport { Modal } from 'reactstrap';\r\nimport ProfileDoctor from '../ProfileDoctor';\r\nimport _ from 'lodash';\r\nimport { LANGUAGES, CommonUtils } from '../../../../utils';\r\nimport * as actions from \"../../../../store/actions\";\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\nimport moment from 'moment';\r\nimport { toast } from \"react-toastify\";\r\nimport DatePicker from '../../../../components/Input/DatePicker';\r\nimport { postPatientBookAppointment } from \"../../../../services/userService\";\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\nclass BookingModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fullName: '',\r\n            phoneNumber: '',\r\n            email: '',\r\n            address: '',\r\n            reason: '',\r\n            plantName: '',\r\n            specialtyName: '',\r\n            // selectedGender: '',\r\n            doctorId: '',\r\n            // genders: '',\r\n            timeType: '',\r\n            previewImgURL: '',\r\n            image: '',\r\n            isOpen: false,\r\n\r\n            birthday: '',\r\n            reasons: '',\r\n            birthdays: ''\r\n        }\r\n\r\n\r\n    }\r\n    //doctorId, timeType được lấy từ dataTime\r\n\r\n\r\n    async componentDidMount() {\r\n        // this.props.getGenders();\r\n    }\r\n\r\n    // buildDataGender = (data) => {\r\n    //     let result = [];\r\n    //     let language = this.props.language;\r\n    //     if (data && data.length > 0) {\r\n    //         data.map(item => {\r\n    //             let object = {};\r\n    //             object.label = language === LANGUAGES.VI ? item.valueVi : item.valueEn;\r\n    //             object.value = item.keyMap;\r\n    //             result.push(object);\r\n    //         })\r\n    //     }\r\n    //     return result;\r\n    // }\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n            // this.setState({\r\n            //     genders: this.buildDataGender(this.props.genders)\r\n            // })\r\n        }\r\n        // if (this.props.genders !== prevProps.genders) {\r\n        //     this.setState({\r\n        //         genders: this.buildDataGender(this.props.genders)\r\n        //     })\r\n        // }\r\n\r\n\r\n        //dataTime đã lấy ra được tất cả những thông tin cần thiết qua api nodejs\r\n        if (this.props.dataTime !== prevProps.dataTime) {\r\n            if (this.props.dataTime && !_.isEmpty(this.props.dataTime)) {\r\n                let doctorId = this.props.dataTime.doctorId;\r\n                let timeType = this.props.dataTime.timeType;\r\n                this.setState({\r\n                    doctorId: doctorId,\r\n                    timeType: timeType,\r\n\r\n                })\r\n            }\r\n\r\n        }\r\n    }\r\n    // VỚI event.target.value, nó truy xuất giá trị của tất cả những đầu vào được gọi,\r\n // bất kỳ thứ gì chèn vào đầu vào đều có thể được truy cập thông qua event.target.value\r\n    handleOnChangeInput = (event, id) => {\r\n        let valueInput = event.target.value;\r\n        let stateCopy = { ...this.state };\r\n        stateCopy[id] = valueInput;\r\n        this.setState({\r\n            ...stateCopy\r\n        })\r\n    }\r\n    handleOnChangeDatePicker = (date) => {\r\n        this.setState({\r\n            birthday: date[0]\r\n        })\r\n    }\r\n    handleOnChangeDatePickers =(birthdays) =>{\r\n        this.setState({\r\n            birthdays: birthdays[0]\r\n        })\r\n    }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            let objectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImgURL: objectUrl,\r\n                image: base64,\r\n            })\r\n        }\r\n    }\r\n    openPreviewImage = () => {\r\n        if (!this.state.previewImgURL) return;\r\n        this.setState({\r\n            isOpen: true,\r\n\r\n\r\n        })\r\n\r\n    }\r\n    buildTimeBooking = (dataTime) => {\r\n        let { language } = this.props;\r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            let time = language === LANGUAGES.VI ? dataTime.timeTypeData.valueVi : dataTime.timeTypeData.valueEn;\r\n            let date = language === LANGUAGES.VI ?\r\n                moment.unix(+dataTime.date / 1000).format('dddd -DD/MM/YYYY') :\r\n                moment.unix(+dataTime.date / 1000).locale('en').format('ddd- MM/DD/YYYY');\r\n            let birthdays = language === LANGUAGES.VI ?\r\n                moment.unix(+dataTime.birthdays / 1000).format('dddd -DD/MM/YYYY') :\r\n                moment.unix(+dataTime.birthdays / 1000).locale('en').format('ddd- MM/DD/YYYY');\r\n            return `${time} - ${date}`;\r\n        }\r\n        return ''\r\n    }\r\n    buildDoctorName = (dataTime) => {\r\n        let { language } = this.props;\r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            let name = language === LANGUAGES.VI ?\r\n                `${dataTime.doctorData.firstName} ${dataTime.doctorData.lastName}`\r\n                :\r\n                `${dataTime.doctorData.lastName} ${dataTime.doctorData.firstName}`\r\n            return name;\r\n        }\r\n        return ''\r\n    }\r\n    // handleChangeSelect = (selectedOption) => {\r\n    //     this.setState({\r\n    //         selectedGender: selectedOption\r\n    //     });\r\n    //  if (this.props.history) {\r\n    // console.log('baophuc2k check doctor', doctor);\r\n    // this.props.history.push(`/detail-doctor/${doctor.id}`);\r\n    // }\r\n    // }\r\n    handleConfirmBooking = async () => {\r\n        //date là truyền timestamp lên db \r\n        //timeString truyền human date lên nodemailer\r\n        let date = new Date(this.state.birthday).getTime();\r\n        let birthdays = new Date(this.state.birthdays).getTime();\r\n        let timeString = this.buildTimeBooking(this.props.dataTime);\r\n        let doctorName = this.buildDoctorName(this.props.dataTime);\r\n\r\n        let res = await postPatientBookAppointment({\r\n            fullName: this.state.fullName,\r\n            phoneNumber: this.state.phoneNumber,\r\n            email: this.state.email,\r\n            address: this.state.address,\r\n            reasons: this.state.reasons,\r\n            date: this.props.dataTime.date,\r\n            birthday: date,\r\n            birthdays: birthdays,\r\n            plantName: this.state.plantName,\r\n            specialtyName: this.state.specialtyName,\r\n            // selectedGender: this.state.selectedGender.value,\r\n            doctorId: this.state.doctorId,\r\n            timeType: this.state.timeType,\r\n            image: this.state.image,\r\n            language: this.props.language,\r\n            timeString: timeString,\r\n            doctorName: doctorName\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            toast.success(\"Booking a new appointment succeed!\")\r\n            this.props.closeBookingClose();\r\n        } else {\r\n            toast.error(\"Booking a new appointment failed!\")\r\n            console.log('check res', res);\r\n        }\r\n    }\r\n    render() {\r\n        let { isOpenModal, closeBookingClose, dataTime } = this.props;\r\n        console.log('check data', dataTime);\r\n        let doctorId = '';\r\n        if (dataTime && !_.isEmpty(dataTime)) {\r\n            doctorId = dataTime.doctorId;\r\n        }\r\n\r\n        return (\r\n            <>\r\n\r\n                <Modal\r\n                    isOpen={isOpenModal}\r\n                    className={'booking-modal-container'}\r\n                    size=\"lg\"\r\n                    centered>\r\n                    <div className=\"booking-modal-content\" >\r\n                        <div className=\"booking-modal-header\">\r\n                            <span className=\"left\"><FormattedMessage id=\"patient.booking-modal.title\" /></span>\r\n                            <span className=\"right\"\r\n                                onClick={closeBookingClose}>\r\n                                <i className=\"fa-solid fa-xmark\"></i>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"booking-modal-body\">\r\n                            <div className=\"doctor-infor\">\r\n                                <ProfileDoctor\r\n                                    doctorId={doctorId}\r\n                                    isShowDescriptionDoctor={false}\r\n                                    dataTime={dataTime}\r\n                                    isShowLinkDetail={false}\r\n                                    isShowPrice={true} />\r\n                            </div>\r\n                           \r\n                            <div className=\"row\">\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.fullName\" /></label>\r\n                                    <input className=\"form-control\"\r\n                                        onChange={(event) => this.handleOnChangeInput(event, 'fullName')} />\r\n                                </div>\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.phoneNumber\" /></label>\r\n                                    <input className=\"form-control\"\r\n                                        onChange={(event) => this.handleOnChangeInput(event, 'phoneNumber')} />\r\n                                </div>\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.email\" /></label>\r\n                                    <input className=\"form-control\"\r\n                                        onChange={(event) => this.handleOnChangeInput(event, 'email')} />\r\n                                </div>\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.address\" /></label>\r\n                                    <input className=\"form-control\"\r\n                                        onChange={(event) => this.handleOnChangeInput(event, 'address')} />\r\n                                </div>\r\n                                <div className=\"col-12 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.reason\" /></label>\r\n                                    <input className=\"form-control\"\r\n                                        onChange={(event) => this.handleOnChangeInput(event, 'reasons')} />\r\n                                </div>\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.avatar\" /></label>\r\n                                    <div className=\"preview-img-container\">\r\n                                        <input className=\"form-control\" id=\"previewImg\" type=\"file\" hidden\r\n                                            onChange={(event) => this.handleOnChangeImage(event)}\r\n                                        />\r\n                                        <label className=\"label-upload\" htmlFor=\"previewImg\">Upload<i className=\"fa-solid fa-upload\"></i></label>\r\n\r\n                                        <div className=\"preview-image\" style={{ backgroundImage: `url(${this.state.previewImgURL})` }}\r\n                                            onClick={() => this.openPreviewImage()}\r\n                                        >\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label>Ngày tháng mua cây(Không bắt buộc)</label>\r\n                                    <DatePicker\r\n                                        onChange={this.handleOnChangeDatePickers}\r\n                                        className=\"form-control\"\r\n                                        value={this.state.birthdays}\r\n                                    />\r\n                                </div>\r\n                                {/* <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.gender\" /></label>\r\n                                        <Select\r\n                                        value={this.state.selectedGender}\r\n                                        onChange={this.handleChangeSelect}\r\n                                        options={this.state.genders}/>\r\n                                    </div> */}\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.plantName\" /></label>\r\n                                    <input className=\"form-control\"\r\n                                        onChange={(event) => this.handleOnChangeInput(event, 'plantName')} />\r\n                                </div>\r\n                                <div className=\"col-6 form-group\">\r\n                                    <label><FormattedMessage id=\"patient.booking-modal.specialtyName\" /></label>\r\n                                    <input className=\"form-control\"\r\n                                        onChange={(event) => this.handleOnChangeInput(event, 'specialtyName')} />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"booking-modal-footer\">\r\n                            <button className=\"btn-booking-confirm\"\r\n                                onClick={() => this.handleConfirmBooking()}>\r\n                                <FormattedMessage id=\"patient.booking-modal.btnConfirm\" />\r\n                            </button>\r\n                            <button className=\"btn-booking-cancel\"\r\n                                onClick={closeBookingClose}>\r\n                                <FormattedMessage id=\"patient.booking-modal.btnCancel\" />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                </Modal>\r\n                {this.state.isOpen === true &&\r\n                    <Lightbox\r\n                        mainSrc={this.state.previewImgURL}\r\n                        onCloseRequest={() => this.setState({ isOpen: false })} />}\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language\r\n        // genders: state.admin.genders\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getGenders: () => dispatch(actions.fetchGenderStart()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(BookingModal);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Doctor\\ProfileDoctor.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\Input\\index.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\components\\Input\\InputSuggest.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\VerifyEmail.js",[],"C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\auth\\Register.js",["391"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './Register.scss';\r\nimport { emitter } from '../../utils/emitter';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nclass Register extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            password: '',\r\n            firstName: '',\r\n            lastName: ' ',\r\n            address: ''\r\n        }\r\n        this.listenToEmitter();\r\n    }\r\n    listenToEmitter() {\r\n        emitter.on('EVENT_CLEAR_MODAL_DATA', () => {\r\n            this.setState({\r\n                email: '',\r\n                password: '',\r\n                firstName: '',\r\n                lastName: ' ',\r\n                address: ''\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n    toggle = () => {\r\n        this.props.toggleFromParent();\r\n    }\r\n    handleOnChangeInput = (event, id) => {\r\n        let copyState = { ...this.state };\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState\r\n        });\r\n    }\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrInput = ['email', 'password', 'firstName', 'lastName', 'address'];\r\n        for (let i = 0; i < arrInput.length; i++) {\r\n            if (!this.state[arrInput[i]]) {\r\n                isValid = false;\r\n                alert('Missing parameter: ' + arrInput[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n    handleAddNewUser = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === true) {\r\n            //gọi api để tạo modal\r\n            this.props.createNewUser(this.state, 'DONE!');\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal\r\n                isOpen={this.props.isOpen}\r\n                toggle={() => { this.toggle() }}\r\n                className={'modal-user-container'}\r\n                size=\"lg\">\r\n                <ModalHeader toggle={() => { this.toggle() }}>ADD NEW USER:</ModalHeader>\r\n                <ModalBody>\r\n\r\n                    <div className=\"modal-user-body\">\r\n                        <div className=\"input-container \">\r\n                            <label>Email</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"email\") }}\r\n                                value={this.state.email}></input>\r\n                        </div>\r\n                        <div className=\"input-container \">\r\n                            <label>Password</label>\r\n                            <input type=\"password\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"password\") }}\r\n                                value={this.state.password}\r\n                            ></input>\r\n                        </div>\r\n                        <div className=\"input-container \">\r\n                            <label>First Name</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"firstName\") }}\r\n                                value={this.state.firstName}></input>\r\n                        </div>\r\n                        <div className=\"input-container \">\r\n                            <label>Last Name</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"lastName\") }}\r\n                                value={this.state.lastName}></input>\r\n                        </div>\r\n                        <div className=\"input-container max-width-input\">\r\n                            <label>Address</label>\r\n                            <input type=\"text\"\r\n                                onChange={(event) => { this.handleOnChangeInput(event, \"address\") }}\r\n                                value={this.state.address}></input>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" className=\"px-3\" onClick={() => { this.handleAddNewUser() }}>Add new user</Button>\r\n                    <Button color=\"secondary\" className=\"px-3\" onClick={() => { this.toggle() }}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Specialty\\ManageSpecialty.js",["392","393","394","395","396"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { LANGUAGES, CRUD_ACTIONS, CommonUtils } from '../../../utils';\r\nimport './ManageSpecialty.scss';\r\nimport TableManageSpecialty from '../TableManageSpecialty';\r\nimport * as actions from '../../../store/actions';\r\nimport Lightbox from 'react-image-lightbox';\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nimport 'react-image-lightbox/style.css'; // This only needs to be imported once in your app\r\nconst mdParser = new MarkdownIt();\r\nclass ManageSpecialty extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            descriptionMarkdown: '',\r\n            descriptionHTML: '',\r\n\r\n            specialtyArr: [],\r\n\r\n            isOpen: false,\r\n            previewImgURL: '',\r\n            name: '',\r\n            specialty: '',\r\n            avatar: '',\r\n            action: '',\r\n            specialtyEditId: '',\r\n\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n\r\n        this.props.getSpecialtyStart();\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.specialtyRedux !== this.props.specialtyRedux) {\r\n            let arrSpecialties = this.props.specialtyRedux;\r\n            this.setState({\r\n                specialtyArr: arrSpecialties,\r\n                specialty: arrSpecialties && arrSpecialties.length > 0 ? arrSpecialties[0].keyMap : '',\r\n            })\r\n        }\r\n        if (prevProps.listSpecialties !== this.props.listSpecialties) {\r\n            let arrSpecialties = this.props.specialtyRedux;\r\n            this.setState({\r\n                name: '',\r\n                specialty: arrSpecialties && arrSpecialties.length > 0 ? arrSpecialties[0].keyMap : '',\r\n                avatar: '',\r\n                action: CRUD_ACTIONS.CREATE,\r\n                previewImgURL: '',\r\n                descriptionMarkdown: '',\r\n                descriptionHTML: ''\r\n            })\r\n        }\r\n    }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            let objectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImgURL: objectUrl,\r\n                avatar: base64,\r\n            })\r\n        }\r\n    }\r\n    openPreviewImage = () => {\r\n        if (!this.state.previewImgURL) return;\r\n        this.setState({\r\n            isOpen: true\r\n        })\r\n    }\r\n    handleSaveSpecialty = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === false) return;\r\n        let { action } = this.state;\r\n        if (action === CRUD_ACTIONS.CREATE) {\r\n            this.props.createNewSpecialty({\r\n                name: this.state.name,\r\n                avatar: this.state.avatar,\r\n                descriptionHTML: this.state.descriptionHTML,\r\n                descriptionMarkdown: this.state.descriptionMarkdown\r\n            })\r\n        }\r\n        if (action === CRUD_ACTIONS.EDIT) {\r\n            this.props.editSpecialtyRedux({\r\n                id: this.state.specialtyEditId,\r\n                name: this.state.name,\r\n                avatar: this.state.avatar,\r\n                descriptionHTML: this.state.descriptionHTML,\r\n                descriptionMarkdown: this.state.descriptionMarkdown\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrCheck = ['name', 'descriptionHTML', 'descriptionMarkdown']\r\n        for (let i = 0; i < arrCheck.length; i++) {\r\n            if (!this.state[arrCheck[i]]) {\r\n                isValid = false;\r\n                alert('This input is required: ' + arrCheck[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n    onChangeInput = (event, id) => {\r\n        let copyState = { ...this.state }\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState,\r\n        })\r\n    }\r\n\r\n    handleEditSpecialtyFromParent = (specialty) => {\r\n        let imageBase64 = '';\r\n        if (specialty.image) {\r\n            imageBase64 = new Buffer(specialty.image, 'base64').toString('binary');\r\n            //Buffer cung cấp cách xử lý dữ liệu dạng nhị phân, \r\n            //câu lệnh trên xử lý dữ liệu BLOB (được mã hóa là base64) sang dữ liệu binary \r\n        }\r\n        this.setState({\r\n            name: specialty.name,\r\n           \r\n            avatar: '',\r\n            previewImgURL: imageBase64,\r\n            action: CRUD_ACTIONS.EDIT,\r\n            specialtyEditId: specialty.id,\r\n            descriptionHTML: specialty.descriptionHTML,\r\n            descriptionMarkdown: specialty.descriptionMarkdown\r\n        })\r\n    }\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            descriptionMarkdown: text,\r\n            descriptionHTML: html,\r\n        })\r\n    }\r\n    render() {\r\n\r\n\r\n        let language = this.props.language;\r\n        let { name, avatar, descriptionHTML, descriptionMarkdown } = this.state;\r\n        //đây là cách viết của ES7\r\n        return (\r\n\r\n            <div className=\"user-redux-container\" >\r\n                <div className=\"title\">\r\n                    <FormattedMessage id=\"menu.admin.manage-specialty\" />\r\n                </div>\r\n                <div className=\"user-redux-body\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {''}\r\n                            </div>\r\n                            <div className=\"col-md-3 mb-3\">\r\n                                <label htmlFor=\"validationServerUsername\">Specialty's name</label>\r\n                                <div className=\"input-group\">\r\n                                    <input type=\"text\" className=\"form-control\" id=\"validationServerUsername\" placeholder=\"...\" aria-describedby=\"inputGroupPrepend3\" required\r\n                                        value={name}\r\n                                        onChange={(event) => { this.onChangeInput(event, 'name') }}\r\n                                        // disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false} \r\n                                        />\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n\r\n\r\n\r\n                        </div>\r\n                        <div className=\"row\">\r\n\r\n                            <div className=\"col-md-6 mb-3\">\r\n                                <label htmlFor=\"validationServer02\"> <FormattedMessage id=\"create-user.image\" /></label>\r\n                                <div className=\"preview-img-container\">\r\n                                    <input id=\"previewImg\" type=\"file\" hidden\r\n                                        onChange={(event) => this.handleOnChangeImage(event)} />\r\n                                    <label className=\"label-upload\" htmlFor=\"previewImg\">Upload<i className=\"fa-solid fa-upload\"></i></label>\r\n                                    <div className=\"preview-image\" style={{ backgroundImage: `url(${this.state.previewImgURL})` }}\r\n                                        onClick={() => this.openPreviewImage()}\r\n                                    >\r\n\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className=\"form-group\">\r\n                            <div className=\"form-check\">\r\n                                <input className=\"form-check-input is-invalid\" type=\"checkbox\" value=\"\" id=\"invalidCheck3\" required />\r\n                                <label className=\"form-check-label\" htmlFor=\"invalidCheck3\">\r\n                                    <FormattedMessage id=\"create-user.agree\" />\r\n                                </label>\r\n                                <div className=\"invalid-feedback\">\r\n                                    <FormattedMessage id=\"create-user.confirm\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"container-fluid manage-doctor-editor\">\r\n                            <MdEditor style={{ height: '300px' }} renderHTML={text => mdParser.render(text)}\r\n                                onChange={this.handleEditorChange}\r\n                                value={this.state.descriptionMarkdown} />\r\n                        </div>\r\n                        <div className=\"col-12 my-3\">\r\n                            <button className={this.state.action === CRUD_ACTIONS.EDIT ? \"btn btn-warning\" : \"btn btn-primary\"} type=\"submit\"\r\n                                onClick={() => this.handleSaveSpecialty()}>\r\n                                {this.state.action === CRUD_ACTIONS.EDIT ?\r\n                                    <FormattedMessage id=\"manage-user.edit\"></FormattedMessage>\r\n                                    : <FormattedMessage id=\"manage-user.save\"></FormattedMessage>}\r\n                                {/* <FormattedMessage id=\"create-user.submit\"/> */}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"col-12 mb-5\">\r\n                            <TableManageSpecialty\r\n                                handleEditSpecialtyFromParentKey={this.handleEditSpecialtyFromParent}\r\n                                action={this.state.action} />\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                {this.state.isOpen === true &&\r\n                    <Lightbox\r\n                        mainSrc={this.state.previewImgURL}\r\n                        onCloseRequest={() => this.setState({ isOpen: false })} />}\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        listSpecialties: state.admin.specialties\r\n    };\r\n};\r\n//những cái biến state ở trên hàm mapStateToProps được khai báo trùng với các biến ở trên file này, không cần khai báo ở file\r\n//khác và có thể sử dụng ở file khác, vế trái là ta tự khai báo\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getSpecialtyStart: () => dispatch(actions.fetchAllSpecialtyStart()),\r\n        createNewSpecialty: (data) => dispatch(actions.createNewSpecialty(data)),\r\n        editSpecialtyRedux: (data) => dispatch(actions.editSpecialty(data))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageSpecialty);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Specialty\\DetailSpecialty.js",["397","398","399"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './DetailSpecialty.scss';\r\nimport HomeHeader from '../../HomePage/HomeHeader';\r\nimport DoctorSchedule from '../Doctor/DoctorSchedule';\r\nimport DoctorExtraInfor from '../Doctor/DoctorExtraInfor';\r\nimport ProfileDoctor from '../Doctor/ProfileDoctor';\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\nimport {getAllCodeService, getAllDetailSpecialtyById} from '../../../services/userService';\r\nimport _ from 'lodash';\r\nimport {LANGUAGES} from '../../../utils';\r\nclass DetailSpecialty extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrDoctorId: [],\r\n            dataDetailSpecialty: {},\r\n            listProvince: []\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if(this.props.match && this.props.match.params && this.props.match.params.id){\r\n            let id = this.props.match.params.id;\r\n            let res = await getAllDetailSpecialtyById({\r\n                id: id,\r\n                location: 'ALL'\r\n            });\r\n            let resProvince = await getAllCodeService('PROVINCE');\r\n            if(res && res.errCode === 0 && resProvince && resProvince.errCode === 0){\r\n                let data = res.data;\r\n                let arrDoctorId = [];\r\n                if(data && !_.isEmpty(data)){\r\n                    let arr = data.doctorSpecialty;\r\n                    if(arr && arr.length > 0){\r\n                        arr.map(item => {\r\n                            arrDoctorId.push(item.doctorId)\r\n                        })\r\n                    }\r\n                }\r\n                let dataProvince = resProvince.data;\r\n                if(dataProvince && dataProvince.length > 0){\r\n                    dataProvince.unshift({\r\n                        createdAt: null,\r\n                        keyMap: \"ALL\",\r\n                        type: \"PROVINCE\",\r\n                        valueEn: \"ALL\",\r\n                        valueVi: \"Toàn quốc\",\r\n                    })\r\n                }\r\n                this.setState({\r\n                    dataDetailSpecialty: res.data,\r\n                    arrDoctorId: arrDoctorId,\r\n                    listProvince: dataProvince ? dataProvince : []\r\n                })\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n    }\r\nhandleOnChangeSelect = async (event)=> {\r\n    if(this.props.match && this.props.match.params && this.props.match.params.id){\r\n        let id = this.props.match.params.id;\r\n        let location = event.target.value;\r\n\r\n        let res = await getAllDetailSpecialtyById({\r\n            id: id,\r\n            location: location\r\n        });\r\n        if(res && res.errCode === 0){\r\n            let data = res.data;\r\n            let arrDoctorId = [];\r\n            if(data && !_.isEmpty(res.data)){\r\n                let arr = data.doctorSpecialty;\r\n                if(arr && arr.length > 0){\r\n                    arr.map(item =>{\r\n                        arrDoctorId.push(item.doctorId)\r\n                    })\r\n                }\r\n            }\r\n            this.setState({\r\n                dataDetailSpecialty: res.data,\r\n                arrDoctorId: arrDoctorId\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n    render() {\r\n        let { arrDoctorId, dataDetailSpecialty, listProvince } = this.state;\r\n        console.log('chuyen nganh check state', this.state)\r\n        let {language} = this.props;\r\n        return (\r\n            <div className=\"detail-specialty-container\">\r\n                <HomeHeader />\r\n                <div className=\"detail-specialty-body\">\r\n                    <div className=\"description-specialty\">\r\n                        {dataDetailSpecialty && !_.isEmpty(dataDetailSpecialty)\r\n                        &&<div dangerouslySetInnerHTML={{ __html: dataDetailSpecialty.descriptionHTML}}>\r\n                            </div>\r\n                            }\r\n                    </div>\r\n                    <div className=\"search-sp-doctor\">\r\n                        <select onChange={(event)=> this.handleOnChangeSelect(event)}>\r\n                            {listProvince && listProvince.length > 0 && \r\n                            listProvince.map((item, index)=>{\r\n                                return(\r\n                                    <option key={index} value={item.keyMap}>\r\n                                        {language === LANGUAGES.VI ? item.valueVi : item.valueEn}\r\n                                    </option>\r\n                                )\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                    {arrDoctorId && arrDoctorId.length>0 &&\r\n                    arrDoctorId.map((item, index)=> {\r\n                        return(\r\n                            <div className=\"each-doctor\" key={index}>\r\n                                <div className=\"dt-content-left\">\r\n                                    <div className=\"profile-doctor\">\r\n                                        <ProfileDoctor\r\n                                        doctorId={item}\r\n                                        isShowDescriptionDoctor={true}\r\n                                        isShowLinkDetail={true}\r\n                                        isShowPrice={false}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"dt-content-right\">\r\n                                    <div className=\"doctor-schedule\">\r\n                                        <DoctorSchedule\r\n                                        doctorIdFromParent={item}\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"doctor-extra-infor\">\r\n                                        <DoctorExtraInfor\r\n                                        doctorIdFromParent={item}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailSpecialty);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Clinic\\ManageClinic.js",["400","401","402","403","404"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { LANGUAGES, CRUD_ACTIONS, CommonUtils } from '../../../utils';\r\nimport './ManageClinic.scss';\r\nimport TableManageClinic from '../TableManageClinic';\r\nimport * as actions from '../../../store/actions';\r\nimport Lightbox from 'react-image-lightbox';\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nimport 'react-image-lightbox/style.css'; // This only needs to be imported once in your app\r\nconst mdParser = new MarkdownIt();\r\nclass ManageClinic extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            descriptionMarkdown: '',\r\n            descriptionHTML: '',\r\n           \r\n            clinicArr: [],\r\n           \r\n            isOpen: false,\r\n            previewImgURL: '',\r\n            name: '',\r\n            address: '',\r\n            clinic: '',\r\n            avatar: '',\r\n            action: '',\r\n            clinicEditId: '',\r\n          \r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        \r\n        this.props.getClinicStart();\r\n        \r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.clinicRedux !== this.props.clinicRedux) {\r\n            let arrClinics = this.props.clinicRedux;\r\n            this.setState({\r\n               clinicArr: arrClinics,\r\n                clinic: arrClinics && arrClinics.length > 0 ? arrClinics[0].keyMap : '',\r\n            })\r\n        }\r\n        if (prevProps.listClinics !== this.props.listClinics) {\r\n            let arrClinics = this.props.clinicRedux;\r\n            this.setState({\r\n                name: '',\r\n                address: '',\r\n                clinic: arrClinics && arrClinics.length > 0 ? arrClinics[0].keyMap : '',\r\n                avatar: '',\r\n                action: CRUD_ACTIONS.CREATE,\r\n                previewImgURL: '',\r\n                descriptionMarkdown: '',\r\n                descriptionHTML: ''\r\n            })\r\n        }\r\n    }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            let objectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImgURL: objectUrl,\r\n                avatar: base64,\r\n            })\r\n        }\r\n    }\r\n    openPreviewImage = () => {\r\n        if (!this.state.previewImgURL) return;\r\n        this.setState({\r\n            isOpen: true\r\n        })\r\n    }\r\n    handleSaveClinic = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === false) return;\r\n        let { action } = this.state;\r\n        if (action === CRUD_ACTIONS.CREATE) {\r\n            this.props.createNewClinic({\r\n                name: this.state.name,\r\n                avatar: this.state.avatar,\r\n                descriptionHTML: this.state.descriptionHTML,\r\n                descriptionMarkdown: this.state.descriptionMarkdown,\r\n                address: this.state.address\r\n            })\r\n        }\r\n        if (action === CRUD_ACTIONS.EDIT) {\r\n            this.props.editClinicRedux({\r\n                id: this.state.clinicEditId,\r\n                name: this.state.name,\r\n                address: this.state.address,\r\n                avatar: this.state.avatar,\r\n                descriptionHTML: this.state.descriptionHTML,\r\n                descriptionMarkdown: this.state.descriptionMarkdown\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrCheck = ['name', 'address', 'descriptionHTML', 'descriptionMarkdown']\r\n        for (let i = 0; i < arrCheck.length; i++) {\r\n            if (!this.state[arrCheck[i]]) {\r\n                isValid = false;\r\n                alert('This input is required: ' + arrCheck[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n    onChangeInput = (event, id) => {\r\n        let copyState = { ...this.state }\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState,\r\n        })\r\n    }\r\n \r\n    handleEditClinicFromParent = (clinic) => {\r\n        let imageBase64 = '';\r\n        if (clinic.image) {\r\n            imageBase64 = new Buffer(clinic.image, 'base64').toString('binary');\r\n            //Buffer cung cấp cách xử lý dữ liệu dạng nhị phân, \r\n            //câu lệnh trên xử lý dữ liệu BLOB (được mã hóa là base64) sang dữ liệu binary \r\n        }\r\n        this.setState({\r\n            name: clinic.name,\r\n            address: clinic.address,\r\n            avatar: '',\r\n            previewImgURL: imageBase64,\r\n            action: CRUD_ACTIONS.EDIT,\r\n            clinicEditId: clinic.id,\r\n            descriptionHTML: clinic.descriptionHTML,\r\n            descriptionMarkdown: clinic.descriptionMarkdown\r\n        })\r\n    }\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            descriptionMarkdown: text,\r\n            descriptionHTML: html,\r\n        })\r\n    }\r\n    render() {\r\n       \r\n       \r\n        let language = this.props.language;\r\n        let { name, address\r\n            , avatar, descriptionHTML, descriptionMarkdown } = this.state;\r\n        //đây là cách viết của ES7\r\n        return (\r\n\r\n            <div className=\"user-redux-container\" >\r\n                <div className=\"title\">\r\n                    <FormattedMessage id=\"menu.admin.manage-clinic\" />\r\n                </div>\r\n                <div className=\"user-redux-body\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {''}\r\n                            </div>\r\n                            <div className=\"col-md-3 mb-3\">\r\n                                <label htmlFor=\"validationServerUsername\">Clinic's name</label>\r\n                                <div className=\"input-group\">\r\n                                    <input type=\"text\" className=\"form-control\" id=\"validationServerUsername\" placeholder=\"...\" aria-describedby=\"inputGroupPrepend3\" required\r\n                                        value={name}\r\n                                        onChange={(event) => { this.onChangeInput(event, 'name') }}\r\n                                        // disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false}\r\n                                         />\r\n\r\n                                </div>\r\n                            </div>\r\n                           \r\n                           \r\n                           \r\n                           \r\n\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6 mb-3\">\r\n                                <label htmlFor=\"validationServer03\"> <FormattedMessage id=\"create-user.address\" /></label>\r\n                                <input type=\"text\" className=\"form-control \" id=\"validationServer03\" placeholder=\"...\" required\r\n                                    value={address}\r\n                                    onChange={(event) => { this.onChangeInput(event, 'address') }} />\r\n\r\n                            </div>\r\n                           \r\n                            <div className=\"col-md-3 mb-3\">\r\n                                <label htmlFor=\"validationServer02\"> <FormattedMessage id=\"create-user.image\" /></label>\r\n                                <div className=\"preview-img-container\">\r\n                                    <input id=\"previewImg\" type=\"file\" hidden\r\n                                        onChange={(event) => this.handleOnChangeImage(event)} />\r\n                                    <label className=\"label-upload\" htmlFor=\"previewImg\">Upload<i className=\"fa-solid fa-upload\"></i></label>\r\n                                    <div className=\"preview-image\" style={{ backgroundImage: `url(${this.state.previewImgURL})` }}\r\n                                        onClick={() => this.openPreviewImage()}\r\n                                    >\r\n\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                      \r\n\r\n\r\n                        <div className=\"form-group\">\r\n                            <div className=\"form-check\">\r\n                                <input className=\"form-check-input is-invalid\" type=\"checkbox\" value=\"\" id=\"invalidCheck3\" required />\r\n                                <label className=\"form-check-label\" htmlFor=\"invalidCheck3\">\r\n                                    <FormattedMessage id=\"create-user.agree\" />\r\n                                </label>\r\n                                <div className=\"invalid-feedback\">\r\n                                    <FormattedMessage id=\"create-user.confirm\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"container-fluid manage-doctor-editor\">\r\n                            <MdEditor style={{ height: '300px' }} renderHTML={text => mdParser.render(text)}\r\n                                onChange={this.handleEditorChange}\r\n                                value={this.state.descriptionMarkdown} />\r\n                        </div>\r\n                        <div className=\"col-12 my-3\">\r\n                            <button className={this.state.action === CRUD_ACTIONS.EDIT ? \"btn btn-warning\" : \"btn btn-primary\"} type=\"submit\"\r\n                                onClick={() => this.handleSaveClinic()}>\r\n                                {this.state.action === CRUD_ACTIONS.EDIT ?\r\n                                    <FormattedMessage id=\"manage-user.edit\"></FormattedMessage>\r\n                                    : <FormattedMessage id=\"manage-user.save\"></FormattedMessage>}\r\n                                {/* <FormattedMessage id=\"create-user.submit\"/> */}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"col-12 mb-5\">\r\n                            <TableManageClinic\r\n                                handleEditClinicFromParentKey={this.handleEditClinicFromParent}\r\n                                action={this.state.action} />\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                {this.state.isOpen === true &&\r\n                    <Lightbox\r\n                        mainSrc={this.state.previewImgURL}\r\n                        onCloseRequest={() => this.setState({ isOpen: false })} />}\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        listClinics: state.admin.clinics\r\n    };\r\n};\r\n//những cái biến state ở trên hàm mapStateToProps được khai báo trùng với các biến ở trên file này, không cần khai báo ở file\r\n//khác và có thể sử dụng ở file khác, vế trái là ta tự khai báo\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getClinicStart: () => dispatch(actions.fetchAllClinicStart()),\r\n        createNewClinic: (data) => dispatch(actions.createNewClinic(data)),\r\n        editClinicRedux: (data) => dispatch(actions.editClinic(data))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageClinic);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Clinic\\DetailClinic.js",["405","406","407","408","409"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './DetailClinic.scss';\r\nimport HomeHeader from '../../HomePage/HomeHeader';\r\nimport DoctorSchedule from '../Doctor/DoctorSchedule';\r\nimport DoctorExtraInfor from '../Doctor/DoctorExtraInfor';\r\nimport ProfileDoctor from '../Doctor/ProfileDoctor';\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\nimport { getAllCodeService, getAllDetailClinicById } from '../../../services/userService';\r\nimport _ from 'lodash';\r\nimport { LANGUAGES } from '../../../utils';\r\nclass DetailClinic extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            arrDoctorId: [],\r\n            dataDetailClinic: {}\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id;\r\n            let res = await getAllDetailClinicById({\r\n                id: id\r\n            });\r\n           \r\n            if (res && res.errCode === 0) {\r\n                let data = res.data;\r\n                let arrDoctorId = [];\r\n                if (data && !_.isEmpty(res.data)) {\r\n                    let arr = data.doctorClinic;\r\n                    if (arr && arr.length > 0) {\r\n                        arr.map(item => {\r\n                            arrDoctorId.push(item.doctorId)\r\n                        })\r\n                    }\r\n                }\r\n                \r\n                this.setState({\r\n                    dataDetailClinic: res.data,\r\n                    arrDoctorId: arrDoctorId,\r\n                  \r\n                })\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n    }\r\n  \r\n\r\n    render() {\r\n        let { arrDoctorId, dataDetailClinic } = this.state;\r\n        console.log('chuyen nganh check state', this.state)\r\n        let { language } = this.props;\r\n        return (\r\n            <div className=\"detail-clinic-container\">\r\n                <HomeHeader />\r\n                <div className=\"detail-clinic-body\">\r\n                    <div className=\"description-clinic\">\r\n                        {dataDetailClinic && !_.isEmpty(dataDetailClinic)\r\n                       \r\n                            &&\r\n                             <>\r\n                             <div>{dataDetailClinic.name}</div>\r\n                            <div dangerouslySetInnerHTML={{ __html: dataDetailClinic.descriptionHTML }}>\r\n                            </div>\r\n                            </> \r\n                        }\r\n                    </div>\r\n                 \r\n                    {arrDoctorId && arrDoctorId.length > 0 &&\r\n                        arrDoctorId.map((item, index) => {\r\n                            return (\r\n                                <div className=\"each-doctor\" key={index}>\r\n                                    <div className=\"dt-content-left\">\r\n                                        <div className=\"profile-doctor\">\r\n                                            <ProfileDoctor\r\n                                                doctorId={item}\r\n                                                isShowDescriptionDoctor={true}\r\n                                                isShowLinkDetail={true}\r\n                                                isShowPrice={false}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"dt-content-right\">\r\n                                        <div className=\"doctor-schedule\">\r\n                                            <DoctorSchedule\r\n                                                doctorIdFromParent={item}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"doctor-extra-infor\">\r\n                                            <DoctorExtraInfor\r\n                                                doctorIdFromParent={item}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailClinic);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\ManagePatient.js",["410","411","412","413"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './ManagePatient.scss';\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport moment from 'moment';\r\nimport { getAllPatientForDoctor, postSendRemedy } from '../../../services/userService';\r\nimport { LANGUAGES, CommonUtils } from '../../../utils';\r\nimport RemedyModal from './RemedyModal';\r\nimport {toast} from 'react-toastify';\r\nimport LoadingOverLay from \"react-loading-overlay\";\r\nimport _ from 'lodash';\r\nimport 'react-image-lightbox/style.css'; // This only needs to be imported once in your app\r\nimport Lightbox from 'react-image-lightbox';\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\n\r\n\r\nclass ManagePatient extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentDate: moment(new Date()).startOf('day').valueOf(),\r\n            dataPatient: [],\r\n            isOpenRemedyModal: false,\r\n            dataModal: {},\r\n            isShowLoading: false,\r\n            isOpen: false,\r\n            previewImgURL: '',\r\n            avatar: ''\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n       \r\n        this.getDataPatient()\r\n\r\n    }\r\n   \r\n   \r\n    // if(data) {\r\n    //     let img = ({ data }) => <img src={`data:image/jpeg;base64,${data}`} />\r\n    // }\r\n  \r\n    getDataPatient = async () => {\r\n        let { user } = this.props;\r\n        let { currentDate } = this.state;\r\n        let formatedDate = new Date(currentDate).getTime();\r\n        let res = await getAllPatientForDoctor({\r\n            doctorId: user.id,\r\n            date: formatedDate\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            this.setState({\r\n                dataPatient: res.data\r\n            })\r\n        }\r\n    }\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    handleOnChangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0]\r\n        },\r\n          async  () => {\r\n                \r\n              await  this.getDataPatient()\r\n            })\r\n    }\r\n    handleBtnConfirm = (item) => {\r\n        let data ={          \r\n                doctorId: item.doctorId,\r\n                patientId: item.patientId,\r\n                email: item.patientData.email,\r\n                timeType: item.timeType,\r\n                patientName: item.patientData.firstName,\r\n            plantName: item.plantName,\r\n            reasons: item.reasons,\r\n            avatar: item.image,\r\n\r\n        }\r\n        this.setState({\r\n            isOpenRemedyModal: true,\r\n            dataModal: data,\r\n            avatar: ''\r\n        })\r\n\r\n    }\r\n    closeRemedyModal = () => {\r\n        this.setState({\r\n            isOpenRemedyModal:false,\r\n            dataModal: {}\r\n        })\r\n\r\n    }\r\n    sendRemedy = async (dataChild) => {\r\n        let {dataModal} = this.state;\r\n        this.setState({\r\n            isShowLoading: true\r\n        })\r\n        let res = await postSendRemedy({\r\n            email: dataChild.email,\r\n            imgBase64: dataChild.imgBase64,\r\n            doctorId: dataModal.doctorId,\r\n            patientId: dataModal.patientId,\r\n            timeType: dataModal.timeType,\r\n            language: this.props.language,\r\n            patientName: dataModal.patientName,\r\n        })\r\n        if(res && res.errCode === 0) {\r\n            this.setState({\r\n                isShowLoading: false\r\n            })\r\n            toast.success('Send Remedy succeeds');\r\n            this.closeRemedyModal();\r\n            await this.getDataPatient();\r\n        }else{\r\n            this.setState({\r\n                isShowLoading: false\r\n            })\r\n            toast.error('Something went wrong...');\r\n            console.log('error remdey is:', res)\r\n        }\r\n    }\r\n\r\n    render() {\r\n       let {language} = this.props;\r\n        let { dataPatient, isOpenRemedyModal, dataModal } = this.state;\r\n        console.log('dataPatient:', dataPatient);\r\n        return (\r\n            <>\r\n            <LoadingOverLay active= {this.state.isShowLoading}\r\n            spinner\r\n            text='Loading...'>\r\n                    <div className=\"manage-patient-container\">\r\n                        <div className=\"m-p-title\">Quản lý bệnh nhân khám bệnh</div>\r\n                        <div className=\"manage-patient-body row\">\r\n                            <div className=\"col-4 form-group\">\r\n                                <label>Chọn ngày khám</label>\r\n                                <DatePicker\r\n                                    onChange={this.handleOnChangeDatePicker}\r\n                                    className=\"form-control\"\r\n                                    value={this.state.currentDate} />\r\n                            </div>\r\n\r\n                            <div className=\"col-12 table-manage-patient\">\r\n                                <table style={{ width: '100%' }}>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <th>STT</th>\r\n                                            <th>Thời gian</th>\r\n                                            <th>Họ và tên</th>\r\n                                            <th>Địa chỉ</th>\r\n                                            <th>Tên loài cây</th>\r\n                                            <th>Lý do từ khách hàng</th>\r\n                                            <th>Ảnh từ khách hàng</th>\r\n                                            <th>Actions</th>\r\n                                        </tr>\r\n                                        {dataPatient && dataPatient.length > 0 ?\r\n                                            dataPatient.map((item, index) => {\r\n                                                let time = language === LANGUAGES.VI ?\r\n                                                item.timeTypeDataPatient.valueVi : item.timeTypeDataPatient.valueEn;\r\n                                                return (\r\n                                                    <tr key={index}>\r\n                                                        <td>{index + 1}</td>\r\n                                                        <td>{time}</td>\r\n                                                        <td>{item.patientData.firstName}</td>\r\n                                                        <td>{item.patientData.address}</td>\r\n                                                        <td>{item.plantName}</td>\r\n                                                        <td>{item.reasons}</td>\r\n                                                        <td> <img src={`data:image/png;base64,${item.image}`} alt=\"\" />\r\n                                                            {/* <div className=\"preview-image\" style={{ backgroundImage: `url(${this.state.previewImgURL})` }}\r\n                                                                onClick={() => this.openPreviewImage()}\r\n                                                            >\r\n                                                                \r\n                                                            </div> */}\r\n                                                            </td>\r\n                                                        <td>\r\n                                                            <button className=\"mp-btn-confirm\"\r\n                                                                onClick={() => this.handleBtnConfirm(item)}>Xác nhận</button>\r\n                                                            \r\n                                                        </td>\r\n                                                    </tr>\r\n                                                )\r\n                                            })\r\n                                            : <tr>\r\n                                                <td colSpan=\"6\" style={{textAlign: \"center\"}}>\r\nno data\r\n                                            </td>\r\n                                                </tr>}\r\n                                    </tbody>\r\n\r\n\r\n\r\n                                </table>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <RemedyModal\r\n                    isOpenModal={isOpenRemedyModal}\r\n                    dataModal ={dataModal}\r\n                    closeRemedyModal= {this.closeRemedyModal}\r\n                    sendRemedy={this.sendRemedy}/>\r\n\r\n            </LoadingOverLay>\r\n                \r\n\r\n            </>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        user: state.user.userInfo,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManagePatient);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\RemedyModal.js",["414","415","416","417","418"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './RemedyModal.scss';\r\nimport { Modal, Button, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { toast } from \"react-toastify\";\r\nimport moment from 'moment';\r\nimport { CommonUtils } from \"../../../utils\";\r\n\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\n\r\nclass RemedyModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            imgBase64: ''\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email\r\n            })\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.dataModal !== this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email\r\n            })\r\n        }\r\n\r\n    }\r\n    handleOnChangeEmail = (event) => {\r\n        this.setState({\r\n            email: event.target.value\r\n        })\r\n    }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imgBase64: base64\r\n            })\r\n        }\r\n      \r\n    }\r\n    handleSendRemedy = () => {\r\n        this.props.sendRemedy(this.state)\r\n    }\r\n\r\n\r\n    render() {\r\n        let { isOpenModal, closeRemedyModal, dataModal, sendRemedy} = this.props\r\n        return (\r\n           <Modal\r\n           isOpen={isOpenModal}\r\n           className={'booking-modal-container'}\r\n           size=\"md\"\r\n           centered>\r\n            <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\">Gửi hóa đơn khám bệnh thành công</h5>\r\n                <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={closeRemedyModal}>\r\n                    <span aria-hidden=\"true\">x</span>\r\n                </button>\r\n            </div>\r\n            <ModalBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-8 form-group\">\r\n                            <label>Email bệnh nhân</label>\r\n                            <input className=\"form-control\" type=\"email\" value={this.state.email}\r\n                            onChange={(event) => this.handleOnChangeEmail(event)}\r\n                                disabled\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-8 form-group\">\r\n                            <label>Chọn file đơn thuốc</label>\r\n                            <input className=\"form-control-file\" type=\"file\" \r\n                                onChange={(event) => this.handleOnChangeImage(event)}\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n                    \r\n            </ModalBody>\r\n            <ModalFooter>\r\n                <Button color=\"primary\" onClick={() => this.handleSendRemedy()}>Send</Button>\r\n                <Button color=\"secondary\" onClick={closeRemedyModal}>Cancel</Button>\r\n            </ModalFooter>\r\n           \r\n\r\n           </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RemedyModal);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\Patient.js",["419","420"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport Header from '../containers/Header/Header';\r\nimport Manage_Patient from '../containers/System/Patient/Manage_Patient';\r\nclass Patient extends Component {\r\n    // PROPS stands for properties and is being used for passing data from one component to another.\r\n    // But the important part here is that data with props are being passed in a uni-directional flow. ( one way from parent to child)\r\n\r\n    //để lưu giá trị của 1 biến components, ta dùng state\r\n    //Component là một block code độc lập để phân chia các UI (giao diện người dùng) thành các phân nhỏ riêng lẻ để dễ dàng quản lý và tái sử dụng.\r\n\r\n\r\n    render() {\r\n        const { isLoggedIn } = this.props;\r\n\r\n        //khi muốn render ra 1 thứ gì đó trong react, chúng ta phải có hàm return, và trong đó bắt buộc là 1 khối\r\n        return (\r\n            <React.Fragment>\r\n                {isLoggedIn && <Header />}\r\n                <div className=\"container system-container\">\r\n                    <div className=\"system-list\">\r\n                        <Switch>\r\n                           \r\n                            <Route path=\"/patient/manage_patient\" component={Manage_Patient} />\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n\r\n\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        // language: state.app.language,\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        systemMenuPath: state.app.systemMenuPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Patient);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Patient\\Manage_Patient.js",["421","422","423"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './ManagePatient.scss';\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport moment from 'moment';\r\nimport { getAllBookingForPatient } from '../../../services/userService';\r\nimport {LANGUAGES} from '../../../utils';\r\nimport RemedyPatientModal from '../Doctor/RemedyPatientModal';\r\nimport {toast} from 'react-toastify';\r\nimport LoadingOverLay from \"react-loading-overlay\";\r\nimport _ from 'lodash';\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\n\r\n\r\nclass Manage_Patient extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentDate: moment(new Date()).startOf('day').valueOf(),\r\n            dataPatient: [],\r\n            isOpenRemedyModal: false,\r\n            dataModal: {},\r\n            isShowLoading: false\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n       \r\n        this.getDataPatient()\r\n\r\n    }\r\n    getDataPatient = async () => {\r\n        let { user } = this.props;\r\n        let { currentDate } = this.state;\r\n        let formatedDate = new Date(currentDate).getTime();\r\n        let res = await getAllBookingForPatient({\r\n            patientId: user.id,\r\n            date: formatedDate\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            this.setState({\r\n                dataPatient: res.data\r\n            })\r\n        }\r\n    }\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    handleOnChangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0]\r\n        },\r\n          async  () => {\r\n                \r\n              await  this.getDataPatient()\r\n            })\r\n    }\r\n    handleBtnConfirm = (item) => {\r\n        let data ={          \r\n                doctorId: item.doctorId,\r\n                patientId: item.patientId,\r\n                email: item.patientData.email,\r\n                timeType: item.timeType,\r\n                patientName: item.patientData.firstName\r\n           \r\n        }\r\n        this.setState({\r\n            isOpenRemedyModal: true,\r\n            dataModal: data\r\n        })\r\n\r\n    }\r\n    closeRemedyModal = () => {\r\n        this.setState({\r\n            isOpenRemedyModal:false,\r\n            dataModal: {}\r\n        })\r\n\r\n    }\r\n    // sendRemedy = async (dataChild) => {\r\n    //     let {dataModal} = this.state;\r\n    //     this.setState({\r\n    //         isShowLoading: true\r\n    //     })\r\n    //     let res = await postSendRemedy({\r\n    //         email: dataChild.email,\r\n    //         imgBase64: dataChild.imgBase64,\r\n    //         doctorId: dataModal.doctorId,\r\n    //         patientId: dataModal.patientId,\r\n    //         timeType: dataModal.timeType,\r\n    //         language: this.props.language,\r\n    //         patientName: dataModal.patientName,\r\n    //     })\r\n    //     if(res && res.errCode === 0) {\r\n    //         this.setState({\r\n    //             isShowLoading: false\r\n    //         })\r\n    //         toast.success('Send Remedy succeeds');\r\n    //         this.closeRemedyModal();\r\n    //         await this.getDataPatient();\r\n    //     }else{\r\n    //         this.setState({\r\n    //             isShowLoading: false\r\n    //         })\r\n    //         toast.error('Something went wrong...');\r\n    //         console.log('error remdey is:', res)\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n       let {language} = this.props;\r\n        let { dataPatient, isOpenRemedyModal, dataModal } = this.state;\r\n        return (\r\n            <>\r\n            <LoadingOverLay active= {this.state.isShowLoading}\r\n            spinner\r\n            text='Loading...'>\r\n                    <div className=\"manage-patient-container\">\r\n                        <div className=\"m-p-title\">Quản lý lịch khám bệnh</div>\r\n                        <div className=\"manage-patient-body row\">\r\n                            <div className=\"col-4 form-group\">\r\n                                <label>Chọn ngày khám</label>\r\n                                <DatePicker\r\n                                    onChange={this.handleOnChangeDatePicker}\r\n                                    className=\"form-control\"\r\n                                    value={this.state.currentDate} />\r\n                            </div>\r\n\r\n                            <div className=\"col-12 table-manage-patient\">\r\n                                <table style={{ width: '100%' }}>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <th>STT</th>\r\n                                            <th>Thời gian</th>\r\n                                            <th>Họ và tên</th>\r\n                                            <th>Địa chỉ</th>\r\n                                            <th>Actions</th>\r\n                                        </tr>\r\n                                        {dataPatient && dataPatient.length > 0 ?\r\n                                            dataPatient.map((item, index) => {\r\n                                                let time = language === LANGUAGES.VI ?\r\n                                                item.timeTypeDataPatient.valueVi : item.timeTypeDataPatient.valueEn;\r\n                                                return (\r\n                                                    <tr key={index}>\r\n                                                        <td>{index + 1}</td>\r\n                                                        <td>{time}</td>\r\n                                                        <td>{item.patientData.firstName}</td>\r\n                                                        <td>{item.patientData.address}</td>\r\n                                                        <td>\r\n                                                            <button className=\"mp-btn-confirm\"\r\n                                                                onClick={() => this.handleBtnConfirm(item)}>Kiểm tra</button>\r\n                                                            \r\n                                                        </td>\r\n                                                    </tr>\r\n                                                )\r\n                                            })\r\n                                            : <tr>\r\n                                                <td colSpan=\"6\" style={{textAlign: \"center\"}}>\r\nno data\r\n                                            </td>\r\n                                                </tr>}\r\n                                    </tbody>\r\n\r\n\r\n\r\n                                </table>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"contact\">Muốn trở thành đối tác của chúng tôi? Hãy liên hệ 0981xxxxxx ngay! </div>\r\n                    </div>\r\n                    <RemedyPatientModal\r\n                    isOpenModal={isOpenRemedyModal}\r\n                    dataModal ={dataModal}\r\n                    closeRemedyModal= {this.closeRemedyModal}\r\n                    />\r\n\r\n            </LoadingOverLay>\r\n                \r\n\r\n            </>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        user: state.user.userInfo,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Manage_Patient);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\RemedyPatientModal.js",["424","425","426","427"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './RemedyModal.scss';\r\nimport { Modal, Button, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { toast } from \"react-toastify\";\r\nimport moment from 'moment';\r\nimport { CommonUtils } from \"../../../utils\";\r\nclass RemedyModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {         \r\n            email: '',\r\n            imgBase64: ''\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email\r\n            })\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.dataModal !== this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email\r\n            })\r\n        }\r\n\r\n    }\r\n    handleOnChangeEmail = (event) => {\r\n        this.setState({\r\n            email: event.target.value,\r\n            fullName: event.target.value\r\n        })\r\n    }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imgBase64: base64\r\n            })\r\n        }\r\n\r\n    }\r\n    handleSendRemedy = () => {\r\n        this.props.sendRemedy(this.state)\r\n    }\r\n\r\n\r\n    render() {\r\n        let { isOpenModal, closeRemedyModal, dataModal, sendRemedy } = this.props\r\n        console.log('check dataModal', dataModal)\r\n        return (\r\n            <Modal\r\n                isOpen={isOpenModal}\r\n                className={'booking-modal-container'}\r\n                size=\"md\"\r\n                centered>\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\">Thông tin đặt lịch khám bệnh</h5>\r\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={closeRemedyModal}>\r\n                        <span aria-hidden=\"true\">x</span>\r\n                    </button>\r\n                </div>\r\n                <ModalBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-8 form-group\">\r\n                            <label>Email bệnh nhân</label>\r\n                            <input className=\"form-control\" type=\"email\" value={this.state.email}\r\n                                onChange={(event) => this.handleOnChangeEmail(event)}\r\n                                disabled\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    \r\n                    <Button color=\"secondary\" onClick={closeRemedyModal}>Cancel</Button>\r\n                </ModalFooter>\r\n\r\n\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RemedyModal);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Admin\\ManagePatients.js",["428","429","430"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './ManagePatient.scss';\r\nimport DatePicker from '../../../components/Input/DatePicker';\r\nimport moment from 'moment';\r\nimport { getAllBookingForAdmin } from '../../../services/userService';\r\nimport { LANGUAGES } from '../../../utils';\r\nimport RemedyAdminModal from '../Doctor/RemedyAdminModal';\r\nimport { toast } from 'react-toastify';\r\nimport LoadingOverLay from \"react-loading-overlay\";\r\nimport _ from 'lodash';\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\n\r\n\r\nclass ManagePatients extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentDate: moment(new Date()).startOf('day').valueOf(),\r\n            dataPatient: [],\r\n            isOpenRemedyModal: false,\r\n            dataModal: {},\r\n            isShowLoading: false\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n\r\n        this.getDataPatient()\r\n\r\n    }\r\n    getDataPatient = async () => {\r\n        let { currentDate } = this.state;\r\n        let formatedDate = new Date(currentDate).getTime();\r\n        let res = await getAllBookingForAdmin({\r\n\r\n            date: formatedDate\r\n        })\r\n        if (res && res.errCode === 0) {\r\n            this.setState({\r\n                dataPatient: res.data\r\n            })\r\n        }\r\n    }\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    handleOnChangeDatePicker = (date) => {\r\n        this.setState({\r\n            currentDate: date[0]\r\n        },\r\n            async () => {\r\n\r\n                await this.getDataPatient()\r\n            })\r\n    }\r\n    handleBtnConfirm = (item) => {\r\n        let data = {\r\n            doctorId: item.doctorId,\r\n            patientId: item.patientId,\r\n            email: item.patientData.email,\r\n            timeType: item.timeType,\r\n            patientName: item.patientData.firstName\r\n\r\n        }\r\n        this.setState({\r\n            isOpenRemedyModal: true,\r\n            dataModal: data\r\n        })\r\n\r\n    }\r\n    closeRemedyModal = () => {\r\n        this.setState({\r\n            isOpenRemedyModal: false,\r\n            dataModal: {}\r\n        })\r\n\r\n    }\r\n    // sendRemedy = async (dataChild) => {\r\n    //     let { dataModal } = this.state;\r\n    //     this.setState({\r\n    //         isShowLoading: true\r\n    //     })\r\n    //     let res = await postSendRemedy({\r\n    //         email: dataChild.email,\r\n    //         imgBase64: dataChild.imgBase64,\r\n    //         doctorId: dataModal.doctorId,\r\n    //         patientId: dataModal.patientId,\r\n    //         timeType: dataModal.timeType,\r\n    //         language: this.props.language,\r\n    //         patientName: dataModal.patientName,\r\n    //     })\r\n    //     if (res && res.errCode === 0) {\r\n    //         this.setState({\r\n    //             isShowLoading: false\r\n    //         })\r\n    //         toast.success('Send Remedy succeeds');\r\n    //         this.closeRemedyModal();\r\n    //         await this.getDataPatient();\r\n    //     } else {\r\n    //         this.setState({\r\n    //             isShowLoading: false\r\n    //         })\r\n    //         toast.error('Something went wrong...');\r\n    //         console.log('error remdey is:', res)\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        let { language } = this.props;\r\n        let { dataPatient, isOpenRemedyModal, dataModal } = this.state;\r\n        return (\r\n            <>\r\n                <LoadingOverLay active={this.state.isShowLoading}\r\n                    spinner\r\n                    text='Loading...'>\r\n                    <div className=\"manage-patient-container\">\r\n                        <div className=\"m-p-title\">Quản lý bệnh nhân khám bệnh</div>\r\n                        <div className=\"manage-patient-body row\">\r\n                            <div className=\"col-4 form-group\">\r\n                                <label>Chọn ngày khám</label>\r\n                                <DatePicker\r\n                                    onChange={this.handleOnChangeDatePicker}\r\n                                    className=\"form-control\"\r\n                                    value={this.state.currentDate} />\r\n                            </div>\r\n\r\n                            <div className=\"col-12 table-manage-patient\">\r\n                                <table style={{ width: '100%' }}>\r\n                                    <tbody>\r\n                                        <tr>\r\n                                            <th>STT</th>\r\n                                            <th>Thời gian</th>\r\n                                            <th>Họ và tên</th>\r\n                                            <th>Địa chỉ</th>\r\n                                            <th>Actions</th>\r\n                                        </tr>\r\n                                        {dataPatient && dataPatient.length > 0 ?\r\n                                            dataPatient.map((item, index) => {\r\n                                                let time = language === LANGUAGES.VI ?\r\n                                                    item.timeTypeDataPatient.valueVi : item.timeTypeDataPatient.valueEn;\r\n                                                return (\r\n                                                    <tr key={index}>\r\n                                                        <td>{index + 1}</td>\r\n                                                        <td>{time}</td>\r\n                                                        <td>{item.patientData.firstName}</td>\r\n                                                        <td>{item.patientData.address}</td>\r\n                                                        <td>\r\n                                                            <button className=\"mp-btn-confirm\"\r\n                                                                onClick={() => this.handleBtnConfirm(item)}>Xem chi tiết</button>\r\n\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                )\r\n                                            })\r\n                                            : <tr>\r\n                                                <td colSpan=\"6\" style={{ textAlign: \"center\" }}>\r\n                                                    no data\r\n                                                </td>\r\n                                            </tr>}\r\n                                    </tbody>\r\n\r\n\r\n\r\n                                </table>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <RemedyAdminModal\r\n                        isOpenModal={isOpenRemedyModal}\r\n                        dataModal={dataModal}\r\n                        closeRemedyModal={this.closeRemedyModal}\r\n                    />\r\n\r\n                </LoadingOverLay>\r\n\r\n\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        user: state.user.userInfo,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManagePatients);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Doctor\\RemedyAdminModal.js",["431","432","433","434","435"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './RemedyModal.scss';\r\nimport { Modal, Button, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { toast } from \"react-toastify\";\r\nimport moment from 'moment';\r\nimport { CommonUtils } from \"../../../utils\";\r\n\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\n\r\nclass RemedyModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            email: '',\r\n            imgBase64: ''\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email\r\n            })\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.dataModal !== this.props.dataModal) {\r\n            this.setState({\r\n                email: this.props.dataModal.email\r\n            })\r\n        }\r\n\r\n    }\r\n    handleOnChangeEmail = (event) => {\r\n        this.setState({\r\n            email: event.target.value\r\n        })\r\n    }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            this.setState({\r\n                imgBase64: base64\r\n            })\r\n        }\r\n\r\n    }\r\n    handleSendRemedy = () => {\r\n        this.props.sendRemedy(this.state)\r\n    }\r\n\r\n\r\n    render() {\r\n        let { isOpenModal, closeRemedyModal, dataModal, sendRemedy } = this.props\r\n        return (\r\n            <Modal\r\n                isOpen={isOpenModal}\r\n                className={'booking-modal-container'}\r\n                size=\"md\"\r\n                centered>\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\">Thông tin đặt lịch khám bệnh</h5>\r\n                    <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={closeRemedyModal}>\r\n                        <span aria-hidden=\"true\">x</span>\r\n                    </button>\r\n                </div>\r\n                <ModalBody>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-8 form-group\">\r\n                            <label>Email bệnh nhân</label>\r\n                            <input className=\"form-control\" type=\"email\" value={this.state.email}\r\n                                onChange={(event) => this.handleOnChangeEmail(event)}\r\n                                disabled\r\n                            />\r\n                        </div>\r\n                       \r\n\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" >Xóa...Đang phát triển...</Button>\r\n                    <Button color=\"secondary\" onClick={closeRemedyModal}>Cancel</Button>\r\n                </ModalFooter>\r\n\r\n\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RemedyModal);\r\n\r\n\r\n\r\n\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\routes\\Admin.js",["436","437"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport Header from '../containers/Header/Header';\r\nimport ManagePatients from '../containers/System/Admin/ManagePatients';\r\nclass Admin extends Component {\r\n    // PROPS stands for properties and is being used for passing data from one component to another.\r\n    // But the important part here is that data with props are being passed in a uni-directional flow. ( one way from parent to child)\r\n\r\n    //để lưu giá trị của 1 biến components, ta dùng state\r\n    //Component là một block code độc lập để phân chia các UI (giao diện người dùng) thành các phân nhỏ riêng lẻ để dễ dàng quản lý và tái sử dụng.\r\n\r\n\r\n    render() {\r\n        const { isLoggedIn } = this.props;\r\n\r\n        //khi muốn render ra 1 thứ gì đó trong react, chúng ta phải có hàm return, và trong đó bắt buộc là 1 khối\r\n        return (\r\n            <React.Fragment>\r\n                {isLoggedIn && <Header />}\r\n                <div className=\"container system-container\">\r\n                    <div className=\"system-list\">\r\n                        <Switch>\r\n\r\n                            <Route path=\"/admin/manage-patients\" component={ManagePatients} />\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n\r\n\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        // language: state.app.language,\r\n        isLoggedIn: state.user.isLoggedIn,\r\n        systemMenuPath: state.app.systemMenuPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Admin);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\TableManageClinic.js",["438"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './TableManageUser.scss';\r\nimport * as actions from \"../../store/actions\";\r\nclass TableManageClinic extends Component {\r\n    // PROPS stands for properties and is being used for passing data from one component to another.\r\n    // But the important part here is that data with props are being passed in a uni-directional flow. ( one way from parent to child)\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            clinicsRedux: [],\r\n            descriptionHTML: '',\r\n            descriptionMarkdown: ''\r\n        }\r\n    }\r\n    //để lưu giá trị của 1 biến components, ta dùng state\r\n    //Component là một block code độc lập để phân chia các UI (giao diện người dùng) thành các phân nhỏ riêng lẻ để dễ dàng quản lý và tái sử dụng.\r\n    componentDidMount() {\r\n        this.props.fetchClinicRedux();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.listClinics !== this.props.listClinics) {\r\n            this.setState({\r\n                clinicsRedux: this.props.listClinics,\r\n            })\r\n        }\r\n    }\r\n\r\n    handleDeleteClinic = (clinic) => {\r\n        this.props.deleteClinicRedux(clinic.id);\r\n    }\r\n\r\n    handleEditClinic = (clinic) => {\r\n        this.props.handleEditClinicFromParentKey(clinic)\r\n    }\r\n   \r\n    render() {\r\n\r\n\r\n        //khi muốn render ra 1 thứ gì đó trong react, chúng ta phải có hàm return, và trong đó bắt buộc là 1 khối\r\n        let arrClinics = this.state.clinicsRedux;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"users-container\">\r\n\r\n\r\n\r\n\r\n                    <div className=\"users-table mt-3 mx-1\">\r\n                        <table id=\"TableManageClinic\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Address</th>\r\n                                    <th>Descriptions</th>\r\n                                    <th>Actions</th>\r\n                                </tr>\r\n                                {arrClinics && arrClinics.length > 0 && arrClinics.map((item, index) => {\r\n                                    // để duyệt 1 vòng lặp, ta có thể dùng function map(), bắt buộc phải return ra 1 thứ gì đó\r\n                                    // thì function map() mới hoạt động được\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td>{item.name}</td> \r\n                                            <td>{item.address}</td>\r\n                                            <td>{item.descriptionMarkdown}</td>\r\n                                            <td>\r\n                                                <button className=\"btn-edit\"\r\n                                                    onClick={() => this.handleEditClinic(item)}><i className=\"fa-solid fa-pencil\"></i></button>\r\n                                                <button className=\"btn-delete\" onClick={() => this.handleDeleteClinic(item)}><i className=\"fa-solid fa-trash\"></i></button>\r\n                                                {/* item là 1 object lưu trữ tất cả thông tin của người dùng */}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                \r\n            </React.Fragment>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        listClinics: state.admin.clinics\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchClinicRedux: () => dispatch(actions.fetchAllClinicStart()),\r\n        deleteClinicRedux: (id) => dispatch(actions.deleteClinic(id)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableManageClinic);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\TableManageSpecialty.js",["439"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './TableManageUser.scss';\r\nimport * as actions from \"../../store/actions\";\r\nclass TableManageSpecialty extends Component {\r\n    // PROPS stands for properties and is being used for passing data from one component to another.\r\n    // But the important part here is that data with props are being passed in a uni-directional flow. ( one way from parent to child)\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            specialtiesRedux: [],\r\n            descriptionHTML: '',\r\n            descriptionMarkdown: ''\r\n        }\r\n    }\r\n    //để lưu giá trị của 1 biến components, ta dùng state\r\n    //Component là một block code độc lập để phân chia các UI (giao diện người dùng) thành các phân nhỏ riêng lẻ để dễ dàng quản lý và tái sử dụng.\r\n    componentDidMount() {\r\n        this.props.fetchSpecialtyRedux();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.listSpecialties !== this.props.listSpecialties) {\r\n            this.setState({\r\n                specialtiesRedux: this.props.listSpecialties,\r\n            })\r\n        }\r\n    }\r\n\r\n    handleDeleteSpecialty = (specialty) => {\r\n        this.props.deleteSpecialtyRedux(specialty.id);\r\n    }\r\n\r\n    handleEditSpecialty = (specialty) => {\r\n        this.props.handleEditSpecialtyFromParentKey(specialty)\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        //khi muốn render ra 1 thứ gì đó trong react, chúng ta phải có hàm return, và trong đó bắt buộc là 1 khối\r\n        let arrSpecialties = this.state.specialtiesRedux;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"users-container\">\r\n\r\n\r\n\r\n\r\n                    <div className=\"users-table mt-3 mx-1\">\r\n                        <table id=\"TableManageSpecialty\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Descriptions</th>\r\n                                    <th>Actions</th>\r\n                                </tr>\r\n                                {arrSpecialties && arrSpecialties.length > 0 && arrSpecialties.map((item, index) => {\r\n                                    // để duyệt 1 vòng lặp, ta có thể dùng function map(), bắt buộc phải return ra 1 thứ gì đó\r\n                                    // thì function map() mới hoạt động được\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td>{item.name}</td>\r\n                                            \r\n                                            <td>{item.descriptionMarkdown}</td>\r\n                                            <td>\r\n                                                <button className=\"btn-edit\"\r\n                                                    onClick={() => this.handleEditSpecialty(item)}><i className=\"fa-solid fa-pencil\"></i></button>\r\n                                                <button className=\"btn-delete\" onClick={() => this.handleDeleteSpecialty(item)}><i className=\"fa-solid fa-trash\"></i></button>\r\n                                                {/* item là 1 object lưu trữ tất cả thông tin của người dùng */}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n            </React.Fragment>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        listSpecialties: state.admin.specialties\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchSpecialtyRedux: () => dispatch(actions.fetchAllSpecialtyStart()),\r\n        deleteSpecialtyRedux: (id) => dispatch(actions.deleteSpecialty(id)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableManageSpecialty);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\Handbook\\ManageHandbook.js",["440","441","442","443","444"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { LANGUAGES, CRUD_ACTIONS, CommonUtils } from '../../../utils';\r\nimport './ManageHandbook.scss';\r\nimport TableManageHandbook from '../TableManageHandbook';\r\nimport * as actions from '../../../store/actions';\r\nimport Lightbox from 'react-image-lightbox';\r\nimport MarkdownIt from 'markdown-it';\r\nimport MdEditor from 'react-markdown-editor-lite';\r\nimport 'react-markdown-editor-lite/lib/index.css';\r\nimport 'react-image-lightbox/style.css'; // This only needs to be imported once in your app\r\nconst mdParser = new MarkdownIt();\r\nclass ManageHandbook extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            descriptionMarkdown: '',\r\n            descriptionHTML: '',\r\n\r\n            handbookArr: [],\r\n\r\n            isOpen: false,\r\n            previewImgURL: '',\r\n            name: '',\r\n            handbook: '',\r\n            avatar: '',\r\n            action: '',\r\n            handbookEditId: '',\r\n\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n\r\n        this.props.getHandbookStart();\r\n\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.handbookRedux !== this.props.handbookRedux) {\r\n            let arrHandbooks = this.props.handbookRedux;\r\n            this.setState({\r\n                handbookArr: arrHandbooks,\r\n                handbook: arrHandbooks && arrHandbooks.length > 0 ? arrHandbooks[0].keyMap : '',\r\n            })\r\n        }\r\n        if (prevProps.listHandbooks !== this.props.listHandbooks) {\r\n            let arrHandbooks = this.props.handbookRedux;\r\n            this.setState({\r\n                name: '',\r\n                handbook: arrHandbooks && arrHandbooks.length > 0 ? arrHandbooks[0].keyMap : '',\r\n                avatar: '',\r\n                action: CRUD_ACTIONS.CREATE,\r\n                previewImgURL: '',\r\n                descriptionMarkdown: '',\r\n                descriptionHTML: ''\r\n            })\r\n        }\r\n    }\r\n    handleOnChangeImage = async (event) => {\r\n        let data = event.target.files;\r\n        let file = data[0];\r\n        if (file) {\r\n            let base64 = await CommonUtils.getBase64(file);\r\n            let objectUrl = URL.createObjectURL(file);\r\n            this.setState({\r\n                previewImgURL: objectUrl,\r\n                avatar: base64,\r\n            })\r\n        }\r\n    }\r\n    openPreviewImage = () => {\r\n        if (!this.state.previewImgURL) return;\r\n        this.setState({\r\n            isOpen: true\r\n        })\r\n    }\r\n    handleSaveHandbook = () => {\r\n        let isValid = this.checkValidateInput();\r\n        if (isValid === false) return;\r\n        let { action } = this.state;\r\n        if (action === CRUD_ACTIONS.CREATE) {\r\n            this.props.createNewHandbook({\r\n                name: this.state.name,\r\n                avatar: this.state.avatar,\r\n                descriptionHTML: this.state.descriptionHTML,\r\n                descriptionMarkdown: this.state.descriptionMarkdown\r\n            })\r\n        }\r\n        if (action === CRUD_ACTIONS.EDIT) {\r\n            this.props.editHandbookRedux({\r\n                id: this.state.handbookEditId,\r\n                name: this.state.name,\r\n                avatar: this.state.avatar,\r\n                descriptionHTML: this.state.descriptionHTML,\r\n                descriptionMarkdown: this.state.descriptionMarkdown\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    checkValidateInput = () => {\r\n        let isValid = true;\r\n        let arrCheck = ['name', 'descriptionHTML', 'descriptionMarkdown']\r\n        for (let i = 0; i < arrCheck.length; i++) {\r\n            if (!this.state[arrCheck[i]]) {\r\n                isValid = false;\r\n                alert('This input is required: ' + arrCheck[i]);\r\n                break;\r\n            }\r\n        }\r\n        return isValid;\r\n    }\r\n    onChangeInput = (event, id) => {\r\n        let copyState = { ...this.state }\r\n        copyState[id] = event.target.value;\r\n        this.setState({\r\n            ...copyState,\r\n        })\r\n    }\r\n\r\n    handleEditHandbookFromParent = (handbook) => {\r\n        let imageBase64 = '';\r\n        if (handbook.image) {\r\n            imageBase64 = new Buffer(handbook.image, 'base64').toString('binary');\r\n            //Buffer cung cấp cách xử lý dữ liệu dạng nhị phân, \r\n            //câu lệnh trên xử lý dữ liệu BLOB (được mã hóa là base64) sang dữ liệu binary \r\n        }\r\n        this.setState({\r\n            name: handbook.name,\r\n\r\n            avatar: '',\r\n            previewImgURL: imageBase64,\r\n            action: CRUD_ACTIONS.EDIT,\r\n            handbookEditId: handbook.id,\r\n            descriptionHTML: handbook.descriptionHTML,\r\n            descriptionMarkdown: handbook.descriptionMarkdown\r\n        })\r\n    }\r\n    handleEditorChange = ({ html, text }) => {\r\n        this.setState({\r\n            descriptionMarkdown: text,\r\n            descriptionHTML: html,\r\n        })\r\n    }\r\n    render() {\r\n\r\n\r\n        let language = this.props.language;\r\n        let { name, avatar, descriptionHTML, descriptionMarkdown } = this.state;\r\n        //đây là cách viết của ES7\r\n        return (\r\n\r\n            <div className=\"user-redux-container\" >\r\n                <div className=\"title\">\r\n                    <FormattedMessage id=\"menu.admin.manage-handbook\" />\r\n                </div>\r\n                <div className=\"user-redux-body\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12\">\r\n                                {''}\r\n                            </div>\r\n                            <div className=\"col-md-3 mb-3\">\r\n                                <label htmlFor=\"validationServerUsername\">Names of common plant diseases</label>\r\n                                <div className=\"input-group\">\r\n                                    <input type=\"text\" className=\"form-control\" id=\"validationServerUsername\" placeholder=\"...\" aria-describedby=\"inputGroupPrepend3\" required\r\n                                        value={name}\r\n                                        onChange={(event) => { this.onChangeInput(event, 'name') }}\r\n                                        // disabled={this.state.action === CRUD_ACTIONS.EDIT ? true : false} \r\n                                        />\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n\r\n\r\n\r\n                        </div>\r\n                        <div className=\"row\">\r\n\r\n                            <div className=\"col-md-6 mb-3\">\r\n                                <label htmlFor=\"validationServer02\"> <FormattedMessage id=\"create-user.image\" /></label>\r\n                                <div className=\"preview-img-container\">\r\n                                    <input id=\"previewImg\" type=\"file\" hidden\r\n                                        onChange={(event) => this.handleOnChangeImage(event)} />\r\n                                    <label className=\"label-upload\" htmlFor=\"previewImg\">Upload<i className=\"fa-solid fa-upload\"></i></label>\r\n                                    <div className=\"preview-image\" style={{ backgroundImage: `url(${this.state.previewImgURL})` }}\r\n                                        onClick={() => this.openPreviewImage()}\r\n                                    >\r\n\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className=\"form-group\">\r\n                            <div className=\"form-check\">\r\n                                <input className=\"form-check-input is-invalid\" type=\"checkbox\" value=\"\" id=\"invalidCheck3\" required />\r\n                                <label className=\"form-check-label\" htmlFor=\"invalidCheck3\">\r\n                                    <FormattedMessage id=\"create-user.agree\" />\r\n                                </label>\r\n                                <div className=\"invalid-feedback\">\r\n                                    <FormattedMessage id=\"create-user.confirm\" />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"container-fluid manage-doctor-editor\">\r\n                            <MdEditor style={{ height: '300px' }} renderHTML={text => mdParser.render(text)}\r\n                                onChange={this.handleEditorChange}\r\n                                value={this.state.descriptionMarkdown} />\r\n                        </div>\r\n                        <div className=\"col-12 my-3\">\r\n                            <button className={this.state.action === CRUD_ACTIONS.EDIT ? \"btn btn-warning\" : \"btn btn-primary\"} type=\"submit\"\r\n                                onClick={() => this.handleSaveHandbook()}>\r\n                                {this.state.action === CRUD_ACTIONS.EDIT ?\r\n                                    <FormattedMessage id=\"manage-user.edit\"></FormattedMessage>\r\n                                    : <FormattedMessage id=\"manage-user.save\"></FormattedMessage>}\r\n                                {/* <FormattedMessage id=\"create-user.submit\"/> */}\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"col-12 mb-5\">\r\n                            <TableManageHandbook\r\n                                handleEditHandbookFromParentKey={this.handleEditHandbookFromParent}\r\n                                action={this.state.action} />\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                {this.state.isOpen === true &&\r\n                    <Lightbox\r\n                        mainSrc={this.state.previewImgURL}\r\n                        onCloseRequest={() => this.setState({ isOpen: false })} />}\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n        listHandbooks: state.admin.handbooks\r\n    };\r\n};\r\n//những cái biến state ở trên hàm mapStateToProps được khai báo trùng với các biến ở trên file này, không cần khai báo ở file\r\n//khác và có thể sử dụng ở file khác, vế trái là ta tự khai báo\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        getHandbookStart: () => dispatch(actions.fetchAllHandbookStart()),\r\n        createNewHandbook: (data) => dispatch(actions.createNewHandbook(data)),\r\n        editHandbookRedux: (data) => dispatch(actions.editHandbook(data))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageHandbook);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\System\\TableManageHandbook.js",["445"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './TableManageUser.scss';\r\nimport * as actions from \"../../store/actions\";\r\nclass TableManageHandbook extends Component {\r\n    // PROPS stands for properties and is being used for passing data from one component to another.\r\n    // But the important part here is that data with props are being passed in a uni-directional flow. ( one way from parent to child)\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            handbooksRedux: [],\r\n            descriptionHTML: '',\r\n            descriptionMarkdown: ''\r\n        }\r\n    }\r\n    //để lưu giá trị của 1 biến components, ta dùng state\r\n    //Component là một block code độc lập để phân chia các UI (giao diện người dùng) thành các phân nhỏ riêng lẻ để dễ dàng quản lý và tái sử dụng.\r\n    componentDidMount() {\r\n        this.props.fetchHandbookRedux();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.listhandbooks !== this.props.listhandbooks) {\r\n            this.setState({\r\n                handbooksRedux: this.props.listhandbooks,\r\n            })\r\n        }\r\n    }\r\n\r\n    handleDeleteHandbook = (handbook) => {\r\n        this.props.deleteHandbookRedux(handbook.id);\r\n    }\r\n\r\n    handleEditHandbook = (handbook) => {\r\n        this.props.handleEditHandbookFromParentKey(handbook)\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        //khi muốn render ra 1 thứ gì đó trong react, chúng ta phải có hàm return, và trong đó bắt buộc là 1 khối\r\n        let arrHandbooks = this.state.handbooksRedux;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"users-container\">\r\n\r\n\r\n\r\n\r\n                    <div className=\"users-table mt-3 mx-1\">\r\n                        <table id=\"TableManageHandbook\">\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Descriptions</th>\r\n                                    <th>Actions</th>\r\n                                </tr>\r\n                                {arrHandbooks && arrHandbooks.length > 0 && arrHandbooks.map((item, index) => {\r\n                                    // để duyệt 1 vòng lặp, ta có thể dùng function map(), bắt buộc phải return ra 1 thứ gì đó\r\n                                    // thì function map() mới hoạt động được\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td>{item.name}</td>\r\n                                           \r\n                                            <td>{item.descriptionMarkdown}</td>\r\n                                            <td>\r\n                                                <button className=\"btn-edit\"\r\n                                                    onClick={() => this.handleEditHandbook(item)}><i className=\"fa-solid fa-pencil\"></i></button>\r\n                                                <button className=\"btn-delete\" onClick={() => this.handleDeleteHandbook(item)}><i className=\"fa-solid fa-trash\"></i></button>\r\n                                                {/* item là 1 object lưu trữ tất cả thông tin của người dùng */}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n\r\n            </React.Fragment>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        listhandbooks: state.admin.handbooks\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        fetchHandbookRedux: () => dispatch(actions.fetchAllHandbookStart()),\r\n        deleteHandbookRedux: (id) => dispatch(actions.deleteHandbook(id)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TableManageHandbook);\r\n","C:\\Users\\1\\OneDrive\\Documents\\GitHub\\webcaytrongVNUA\\test\\webcaytrongVNUA\\webcaytrongVNUA\\React\\src\\containers\\Patient\\Handbook\\DetailHandbook.js",["446","447","448"],"import React, { Component } from 'react';\r\nimport { FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport './DetailHandbook.scss';\r\nimport HomeHeader from '../../HomePage/HomeHeader';\r\n//lodash hỗ trợ ta kiểm tra và thao tác với mảng dễ dàng hơn\r\nimport { getAllDetailHandbookById} from '../../../services/userService';\r\nimport _ from 'lodash';\r\nimport {LANGUAGES} from '../../../utils';\r\nclass DetailHandbook extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n           \r\n            dataDetailHandbook: {}\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        if (this.props.match && this.props.match.params && this.props.match.params.id) {\r\n            let id = this.props.match.params.id;\r\n\r\n            let res = await getAllDetailHandbookById({\r\n                id: id\r\n            });\r\n            if (res && res.errCode === 0) {\r\n                let data = res.data;\r\n\r\n                if (data && !_.isEmpty(res.data)) {\r\n                    this.setState({\r\n                        dataDetailHandbook: res.data,\r\n\r\n                    })\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    async componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.language !== prevProps.language) {\r\n\r\n        }\r\n    }\r\n    render() {\r\n        let {  dataDetailHandbook } = this.state;\r\n        console.log('handbook check state', this.state)\r\n        let {language} = this.props;\r\n        return (\r\n            <div className=\"detail-specialty-container\">\r\n                <HomeHeader />\r\n                <div className=\"detail-specialty-body\">\r\n                    <div className=\"description-specialty\">\r\n                        {dataDetailHandbook && !_.isEmpty(dataDetailHandbook)\r\n                        &&<div dangerouslySetInnerHTML={{ __html: dataDetailHandbook.descriptionHTML}}>\r\n                            </div>\r\n                            }\r\n                    </div>\r\n                  \r\n                 \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        language: state.app.language,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailHandbook);\r\n\r\n\r\n\r\n\r\n",{"ruleId":"449","replacedBy":"450"},{"ruleId":"451","replacedBy":"452"},{"ruleId":"453","severity":1,"message":"454","line":6,"column":10,"nodeType":"455","messageId":"456","endLine":6,"endColumn":26},{"ruleId":"453","severity":1,"message":"457","line":11,"column":10,"nodeType":"455","messageId":"456","endLine":11,"endColumn":16},{"ruleId":"449","replacedBy":"458"},{"ruleId":"451","replacedBy":"459"},{"ruleId":"460","severity":1,"message":"461","line":28,"column":1,"nodeType":"462","endLine":33,"endColumn":3},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"449","replacedBy":"463"},{"ruleId":"451","replacedBy":"464"},{"ruleId":"453","severity":1,"message":"465","line":2,"column":8,"nodeType":"455","messageId":"456","endLine":2,"endColumn":9},{"ruleId":"453","severity":1,"message":"466","line":14,"column":17,"nodeType":"455","messageId":"456","endLine":14,"endColumn":21},{"ruleId":"460","severity":1,"message":"467","line":1,"column":1,"nodeType":"462","endLine":13,"endColumn":3},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"449","replacedBy":"468"},{"ruleId":"451","replacedBy":"469"},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"470","severity":1,"message":"471","line":40,"column":13,"nodeType":"472","messageId":"473","endLine":49,"endColumn":14},{"ruleId":"453","severity":1,"message":"474","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":18},{"ruleId":"453","severity":1,"message":"475","line":23,"column":15,"nodeType":"455","messageId":"456","endLine":23,"endColumn":23},{"ruleId":"476","severity":1,"message":"477","line":38,"column":29,"nodeType":"478","endLine":38,"endColumn":94},{"ruleId":"453","severity":1,"message":"479","line":191,"column":9,"nodeType":"455","messageId":"456","endLine":191,"endColumn":15},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"453","severity":1,"message":"480","line":8,"column":8,"nodeType":"455","messageId":"456","endLine":8,"endColumn":16},{"ruleId":"453","severity":1,"message":"481","line":10,"column":7,"nodeType":"455","messageId":"456","endLine":10,"endColumn":15},{"ruleId":"453","severity":1,"message":"482","line":11,"column":10,"nodeType":"455","messageId":"456","endLine":11,"endColumn":28},{"ruleId":"483","severity":1,"message":"484","line":65,"column":45,"nodeType":"485","messageId":"486","endLine":65,"endColumn":47},{"ruleId":"483","severity":1,"message":"484","line":75,"column":45,"nodeType":"485","messageId":"486","endLine":75,"endColumn":47},{"ruleId":"483","severity":1,"message":"484","line":85,"column":45,"nodeType":"485","messageId":"486","endLine":85,"endColumn":47},{"ruleId":"483","severity":1,"message":"484","line":95,"column":45,"nodeType":"485","messageId":"486","endLine":95,"endColumn":47},{"ruleId":"483","severity":1,"message":"484","line":103,"column":45,"nodeType":"485","messageId":"486","endLine":103,"endColumn":47},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"453","severity":1,"message":"474","line":4,"column":10,"nodeType":"455","messageId":"456","endLine":4,"endColumn":18},{"ruleId":"453","severity":1,"message":"487","line":7,"column":10,"nodeType":"455","messageId":"456","endLine":7,"endColumn":22},{"ruleId":"453","severity":1,"message":"488","line":7,"column":35,"nodeType":"455","messageId":"456","endLine":7,"endColumn":45},{"ruleId":"483","severity":1,"message":"484","line":57,"column":41,"nodeType":"485","messageId":"486","endLine":57,"endColumn":43},{"ruleId":"483","severity":1,"message":"484","line":110,"column":52,"nodeType":"485","messageId":"486","endLine":110,"endColumn":54},{"ruleId":"453","severity":1,"message":"489","line":5,"column":8,"nodeType":"455","messageId":"456","endLine":5,"endColumn":20},{"ruleId":"453","severity":1,"message":"490","line":138,"column":17,"nodeType":"455","messageId":"456","endLine":138,"endColumn":26},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"453","severity":1,"message":"491","line":4,"column":10,"nodeType":"455","messageId":"456","endLine":4,"endColumn":19},{"ruleId":"453","severity":1,"message":"492","line":151,"column":13,"nodeType":"455","messageId":"456","endLine":151,"endColumn":21},{"ruleId":"453","severity":1,"message":"479","line":152,"column":21,"nodeType":"455","messageId":"456","endLine":152,"endColumn":27},{"ruleId":"453","severity":1,"message":"493","line":152,"column":29,"nodeType":"455","messageId":"456","endLine":152,"endColumn":44},{"ruleId":"453","severity":1,"message":"494","line":152,"column":46,"nodeType":"455","messageId":"456","endLine":152,"endColumn":65},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"483","severity":1,"message":"484","line":41,"column":38,"nodeType":"485","messageId":"486","endLine":41,"endColumn":40},{"ruleId":"483","severity":1,"message":"484","line":86,"column":34,"nodeType":"485","messageId":"486","endLine":86,"endColumn":36},{"ruleId":"453","severity":1,"message":"491","line":4,"column":10,"nodeType":"455","messageId":"456","endLine":4,"endColumn":19},{"ruleId":"453","severity":1,"message":"492","line":155,"column":13,"nodeType":"455","messageId":"456","endLine":155,"endColumn":21},{"ruleId":"453","severity":1,"message":"479","line":157,"column":15,"nodeType":"455","messageId":"456","endLine":157,"endColumn":21},{"ruleId":"453","severity":1,"message":"493","line":157,"column":23,"nodeType":"455","messageId":"456","endLine":157,"endColumn":38},{"ruleId":"453","severity":1,"message":"494","line":157,"column":40,"nodeType":"455","messageId":"456","endLine":157,"endColumn":59},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"453","severity":1,"message":"495","line":10,"column":10,"nodeType":"455","messageId":"456","endLine":10,"endColumn":27},{"ruleId":"453","severity":1,"message":"491","line":12,"column":10,"nodeType":"455","messageId":"456","endLine":12,"endColumn":19},{"ruleId":"483","severity":1,"message":"484","line":39,"column":38,"nodeType":"485","messageId":"486","endLine":39,"endColumn":40},{"ruleId":"453","severity":1,"message":"492","line":65,"column":15,"nodeType":"455","messageId":"456","endLine":65,"endColumn":23},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"453","severity":1,"message":"496","line":8,"column":21,"nodeType":"455","messageId":"456","endLine":8,"endColumn":32},{"ruleId":"453","severity":1,"message":"465","line":12,"column":8,"nodeType":"455","messageId":"456","endLine":12,"endColumn":9},{"ruleId":"453","severity":1,"message":"497","line":14,"column":8,"nodeType":"455","messageId":"456","endLine":14,"endColumn":16},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"453","severity":1,"message":"498","line":6,"column":10,"nodeType":"455","messageId":"456","endLine":6,"endColumn":15},{"ruleId":"453","severity":1,"message":"499","line":7,"column":8,"nodeType":"455","messageId":"456","endLine":7,"endColumn":14},{"ruleId":"453","severity":1,"message":"500","line":62,"column":46,"nodeType":"455","messageId":"456","endLine":62,"endColumn":55},{"ruleId":"453","severity":1,"message":"501","line":62,"column":57,"nodeType":"455","messageId":"456","endLine":62,"endColumn":67},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"453","severity":1,"message":"474","line":4,"column":10,"nodeType":"455","messageId":"456","endLine":4,"endColumn":18},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"453","severity":1,"message":"498","line":10,"column":9,"nodeType":"455","messageId":"456","endLine":10,"endColumn":14},{"ruleId":"453","severity":1,"message":"465","line":12,"column":8,"nodeType":"455","messageId":"456","endLine":12,"endColumn":9},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"453","severity":1,"message":"498","line":6,"column":10,"nodeType":"455","messageId":"456","endLine":6,"endColumn":15},{"ruleId":"453","severity":1,"message":"499","line":7,"column":8,"nodeType":"455","messageId":"456","endLine":7,"endColumn":14},{"ruleId":"453","severity":1,"message":"501","line":60,"column":57,"nodeType":"455","messageId":"456","endLine":60,"endColumn":67},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"453","severity":1,"message":"498","line":10,"column":10,"nodeType":"455","messageId":"456","endLine":10,"endColumn":15},{"ruleId":"453","severity":1,"message":"465","line":12,"column":8,"nodeType":"455","messageId":"456","endLine":12,"endColumn":9},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"453","severity":1,"message":"498","line":6,"column":10,"nodeType":"455","messageId":"456","endLine":6,"endColumn":15},{"ruleId":"453","severity":1,"message":"499","line":7,"column":8,"nodeType":"455","messageId":"456","endLine":7,"endColumn":14},{"ruleId":"453","severity":1,"message":"500","line":62,"column":46,"nodeType":"455","messageId":"456","endLine":62,"endColumn":55},{"ruleId":"453","severity":1,"message":"501","line":62,"column":57,"nodeType":"455","messageId":"456","endLine":62,"endColumn":67},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"453","severity":1,"message":"474","line":4,"column":10,"nodeType":"455","messageId":"456","endLine":4,"endColumn":18},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"453","severity":1,"message":"491","line":4,"column":10,"nodeType":"455","messageId":"456","endLine":4,"endColumn":19},{"ruleId":"453","severity":1,"message":"492","line":151,"column":13,"nodeType":"455","messageId":"456","endLine":151,"endColumn":21},{"ruleId":"453","severity":1,"message":"479","line":152,"column":21,"nodeType":"455","messageId":"456","endLine":152,"endColumn":27},{"ruleId":"453","severity":1,"message":"493","line":152,"column":29,"nodeType":"455","messageId":"456","endLine":152,"endColumn":44},{"ruleId":"453","severity":1,"message":"494","line":152,"column":46,"nodeType":"455","messageId":"456","endLine":152,"endColumn":65},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"453","severity":1,"message":"454","line":2,"column":10,"nodeType":"455","messageId":"456","endLine":2,"endColumn":26},{"ruleId":"453","severity":1,"message":"491","line":9,"column":9,"nodeType":"455","messageId":"456","endLine":9,"endColumn":18},{"ruleId":"453","severity":1,"message":"492","line":53,"column":14,"nodeType":"455","messageId":"456","endLine":53,"endColumn":22},"no-native-reassign",["502"],"no-negated-in-lhs",["503"],"no-unused-vars","'FormattedMessage' is defined but never used.","Identifier","unusedVar","'reject' is defined but never used.",["502"],["503"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["502"],["503"],"'_' is defined but never used.","'data' is assigned a value but never used.","Assign object to a variable before exporting as module default",["502"],["503"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'Redirect' is defined but never used.","'userInfo' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'avatar' is assigned a value but never used.","'MdEditor' is defined but never used.","'mdParser' is assigned a value but never used.","'handleEditorChange' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'CRUD_ACTIONS' is defined but never used.","'dateFormat' is defined but never used.","'localization' is defined but never used.","'birthdays' is assigned a value but never used.","'LANGUAGES' is defined but never used.","'language' is assigned a value but never used.","'descriptionHTML' is assigned a value but never used.","'descriptionMarkdown' is assigned a value but never used.","'getAllCodeService' is defined but never used.","'CommonUtils' is defined but never used.","'Lightbox' is defined but never used.","'toast' is defined but never used.","'moment' is defined but never used.","'dataModal' is assigned a value but never used.","'sendRemedy' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]